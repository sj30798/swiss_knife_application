// Generated from Apache PDFBox library which is licensed under the Apache License 2.0.
// The following copyright from the original authors applies.
//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "../../../../../_init.dart";

/// from: org.apache.pdfbox.pdmodel.common.COSArrayList
///
/// This is an implementation of a List that will sync its contents to a COSArray.
///@author Ben Litchfield
class COSArrayList<$E extends jni.JObject> extends jni.JObject {
  @override
  late final jni.JObjType<COSArrayList<$E>> $type = type(E);

  final jni.JObjType<$E> E;

  COSArrayList.fromRef(
    this.E,
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static $COSArrayListType<$E> type<$E extends jni.JObject>(
    jni.JObjType<$E> E,
  ) {
    return $COSArrayListType(
      E,
    );
  }

  static final _new0 = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "COSArrayList__new0")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Default constructor.
  factory COSArrayList({
    required jni.JObjType<$E> E,
  }) {
    return COSArrayList.fromRef(E, _new0().object);
  }

  static final _new1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("COSArrayList__new1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.util.List<E> actualList, org.apache.pdfbox.cos.COSArray cosArray)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Create the COSArrayList specifying the List and the backing COSArray.
  ///
  /// User of this constructor need to ensure that the entries in the List and
  /// the backing COSArray are matching i.e. the COSObject of the List entry is
  /// included in the COSArray.
  ///
  /// If the number of entries in the List and the COSArray differ
  /// it is assumed that the List has been filtered. In that case the COSArrayList
  /// shall only be used for reading purposes and no longer for updating.
  ///@param actualList The list of standard java objects
  ///@param cosArray The COS array object to sync to.
  factory COSArrayList.new1(
    jni.JList<$E> actualList,
    jni.JObject cosArray, {
    jni.JObjType<$E>? E,
  }) {
    E ??= jni.lowestCommonSuperType([
      (actualList.$type as jni.JListType).E,
    ]) as jni.JObjType<$E>;
    return COSArrayList.fromRef(
        E, _new1(actualList.reference, cosArray.reference).object);
  }

  static final _new2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("COSArrayList__new2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(org.apache.pdfbox.cos.COSDictionary dictionary, org.apache.pdfbox.cos.COSName dictionaryKey)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// This constructor is to be used if the array doesn't exist, but is to be created and added to
  /// the parent dictionary as soon as the first element is added to the array.
  ///@param dictionary The dictionary that holds the item, and will hold the array if an item is
  /// added.
  ///@param dictionaryKey The key into the dictionary to set the item.
  factory COSArrayList.new2(
    jni.JObject dictionary,
    jni.JObject dictionaryKey, {
    required jni.JObjType<$E> E,
  }) {
    return COSArrayList.fromRef(
        E, _new2(dictionary.reference, dictionaryKey.reference).object);
  }

  static final _new3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("COSArrayList__new3")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(E actualObject, org.apache.pdfbox.cos.COSBase item, org.apache.pdfbox.cos.COSDictionary dictionary, org.apache.pdfbox.cos.COSName dictionaryKey)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// This is a really special constructor.  Sometimes the PDF spec says
  /// that a dictionary entry can either be a single item or an array of those
  /// items.  But in the PDModel interface we really just want to always return
  /// a java.util.List.  In the case were we get the list and never modify it
  /// we don't want to convert to COSArray and put one element, unless we append
  /// to the list.  So here we are going to create this object with a single
  /// item instead of a list, but allow more items to be added and then converted
  /// to an array.
  ///@param actualObject The PDModel object.
  ///@param item The COS Model object.
  ///@param dictionary The dictionary that holds the item, and will hold the array if an item is added.
  ///@param dictionaryKey The key into the dictionary to set the item.
  factory COSArrayList.new3(
    $E actualObject,
    jni.JObject item,
    jni.JObject dictionary,
    jni.JObject dictionaryKey, {
    jni.JObjType<$E>? E,
  }) {
    E ??= jni.lowestCommonSuperType([
      actualObject.$type,
    ]) as jni.JObjType<$E>;
    return COSArrayList.fromRef(
        E,
        _new3(actualObject.reference, item.reference, dictionary.reference,
                dictionaryKey.reference)
            .object);
  }

  static final _size = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "COSArrayList__size")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int size()
  ///
  /// {@inheritDoc}
  int size() {
    return _size(reference).integer;
  }

  static final _isEmpty = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "COSArrayList__isEmpty")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isEmpty()
  ///
  /// {@inheritDoc}
  bool isEmpty() {
    return _isEmpty(reference).boolean;
  }

  static final _contains = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("COSArrayList__contains")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean contains(java.lang.Object o)
  ///
  /// {@inheritDoc}
  bool contains(
    jni.JObject o,
  ) {
    return _contains(reference, o.reference).boolean;
  }

  static final _iterator = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "COSArrayList__iterator")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Iterator<E> iterator()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// {@inheritDoc}
  jni.JIterator<$E> iterator() {
    return jni.JIteratorType(E).fromRef(_iterator(reference).object);
  }

  static final _toArray = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "COSArrayList__toArray")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object[] toArray()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// {@inheritDoc}
  jni.JArray<jni.JObject> toArray() {
    return const jni.JArrayType(jni.JObjectType())
        .fromRef(_toArray(reference).object);
  }

  static final _toArray1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("COSArrayList__toArray1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public X[] toArray(X[] a)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// {@inheritDoc}
  jni.JArray<$X> toArray1<$X extends jni.JObject>(
    jni.JArray<$X> a, {
    jni.JObjType<$X>? X,
  }) {
    X ??= jni.lowestCommonSuperType([
      ((a.$type as jni.JArrayType).elementType as jni.JObjType),
    ]) as jni.JObjType<$X>;
    return jni.JArrayType(X).fromRef(_toArray1(reference, a.reference).object);
  }

  static final _add = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("COSArrayList__add")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean add(E o)
  ///
  /// {@inheritDoc}
  bool add(
    $E o,
  ) {
    return _add(reference, o.reference).boolean;
  }

  static final _remove = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("COSArrayList__remove")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean remove(java.lang.Object o)
  ///
  /// {@inheritDoc}
  bool remove(
    jni.JObject o,
  ) {
    return _remove(reference, o.reference).boolean;
  }

  static final _containsAll = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("COSArrayList__containsAll")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean containsAll(java.util.Collection<?> c)
  ///
  /// {@inheritDoc}
  bool containsAll(
    jni.JObject c,
  ) {
    return _containsAll(reference, c.reference).boolean;
  }

  static final _addAll = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("COSArrayList__addAll")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean addAll(java.util.Collection<? extends E> c)
  ///
  /// {@inheritDoc}
  bool addAll(
    jni.JObject c,
  ) {
    return _addAll(reference, c.reference).boolean;
  }

  static final _addAll1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("COSArrayList__addAll1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean addAll(int index, java.util.Collection<? extends E> c)
  ///
  /// {@inheritDoc}
  bool addAll1(
    int index,
    jni.JObject c,
  ) {
    return _addAll1(reference, index, c.reference).boolean;
  }

  static final _convertIntegerCOSArrayToList = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "COSArrayList__convertIntegerCOSArrayToList")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.List<java.lang.Integer> convertIntegerCOSArrayToList(org.apache.pdfbox.cos.COSArray intArray)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// This will take an array of COSNumbers and return a COSArrayList of
  /// java.lang.Integer values.
  ///@param intArray The existing integer Array.
  ///@return A list that is part of the core Java collections.
  static jni.JList<jni.JInteger> convertIntegerCOSArrayToList(
    jni.JObject intArray,
  ) {
    return const jni.JListType(jni.JIntegerType())
        .fromRef(_convertIntegerCOSArrayToList(intArray.reference).object);
  }

  static final _convertFloatCOSArrayToList = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "COSArrayList__convertFloatCOSArrayToList")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.List<java.lang.Float> convertFloatCOSArrayToList(org.apache.pdfbox.cos.COSArray floatArray)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// This will take an array of COSNumbers and return a COSArrayList of
  /// java.lang.Float values.
  ///@param floatArray The existing float Array.
  ///@return The list of Float objects.
  static jni.JList<jni.JFloat> convertFloatCOSArrayToList(
    jni.JObject floatArray,
  ) {
    return const jni.JListType(jni.JFloatType())
        .fromRef(_convertFloatCOSArrayToList(floatArray.reference).object);
  }

  static final _convertCOSNameCOSArrayToList = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "COSArrayList__convertCOSNameCOSArrayToList")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.List<java.lang.String> convertCOSNameCOSArrayToList(org.apache.pdfbox.cos.COSArray nameArray)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// This will take an array of COSName and return a COSArrayList of
  /// java.lang.String values.
  ///@param nameArray The existing name Array.
  ///@return The list of String objects.
  static jni.JList<jni.JString> convertCOSNameCOSArrayToList(
    jni.JObject nameArray,
  ) {
    return const jni.JListType(jni.JStringType())
        .fromRef(_convertCOSNameCOSArrayToList(nameArray.reference).object);
  }

  static final _convertCOSStringCOSArrayToList = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "COSArrayList__convertCOSStringCOSArrayToList")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.List<java.lang.String> convertCOSStringCOSArrayToList(org.apache.pdfbox.cos.COSArray stringArray)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// This will take an array of COSString and return a COSArrayList of
  /// java.lang.String values.
  ///@param stringArray The existing name Array.
  ///@return The list of String objects.
  static jni.JList<jni.JString> convertCOSStringCOSArrayToList(
    jni.JObject stringArray,
  ) {
    return const jni.JListType(jni.JStringType())
        .fromRef(_convertCOSStringCOSArrayToList(stringArray.reference).object);
  }

  static final _convertStringListToCOSNameCOSArray = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "COSArrayList__convertStringListToCOSNameCOSArray")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public org.apache.pdfbox.cos.COSArray convertStringListToCOSNameCOSArray(java.util.List<java.lang.String> strings)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// This will take an list of string objects and return a COSArray of COSName
  /// objects.
  ///@param strings A list of strings
  ///@return An array of COSName objects
  static jni.JObject convertStringListToCOSNameCOSArray(
    jni.JList<jni.JString> strings,
  ) {
    return const jni.JObjectType()
        .fromRef(_convertStringListToCOSNameCOSArray(strings.reference).object);
  }

  static final _convertStringListToCOSStringCOSArray = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "COSArrayList__convertStringListToCOSStringCOSArray")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public org.apache.pdfbox.cos.COSArray convertStringListToCOSStringCOSArray(java.util.List<java.lang.String> strings)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// This will take an list of string objects and return a COSArray of COSName
  /// objects.
  ///@param strings A list of strings
  ///@return An array of COSName objects
  static jni.JObject convertStringListToCOSStringCOSArray(
    jni.JList<jni.JString> strings,
  ) {
    return const jni.JObjectType().fromRef(
        _convertStringListToCOSStringCOSArray(strings.reference).object);
  }

  static final _converterToCOSArray = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "COSArrayList__converterToCOSArray")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public org.apache.pdfbox.cos.COSArray converterToCOSArray(java.util.List<?> cosObjectableList)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// This will convert a list of COSObjectables to an array list of COSBase objects.
  ///@param cosObjectableList A list of COSObjectable.
  ///@return A list of COSBase.
  ///@throws IllegalArgumentException if an object type is not supported for conversion to a
  /// COSBase object.
  static jni.JObject converterToCOSArray(
    jni.JList<jni.JObject> cosObjectableList,
  ) {
    return const jni.JObjectType()
        .fromRef(_converterToCOSArray(cosObjectableList.reference).object);
  }

  static final _removeAll = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("COSArrayList__removeAll")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean removeAll(java.util.Collection<?> c)
  ///
  /// {@inheritDoc}
  bool removeAll(
    jni.JObject c,
  ) {
    return _removeAll(reference, c.reference).boolean;
  }

  static final _retainAll = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("COSArrayList__retainAll")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean retainAll(java.util.Collection<?> c)
  ///
  /// {@inheritDoc}
  bool retainAll(
    jni.JObject c,
  ) {
    return _retainAll(reference, c.reference).boolean;
  }

  static final _clear = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "COSArrayList__clear")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void clear()
  ///
  /// {@inheritDoc}
  void clear() {
    return _clear(reference).check();
  }

  static final _equals1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("COSArrayList__equals1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object o)
  ///
  /// {@inheritDoc}
  bool equals1(
    jni.JObject o,
  ) {
    return _equals1(reference, o.reference).boolean;
  }

  static final _hashCode1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "COSArrayList__hashCode1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int hashCode()
  ///
  /// {@inheritDoc}
  int hashCode1() {
    return _hashCode1(reference).integer;
  }

  static final _get0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("COSArrayList__get0")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public E get(int index)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// {@inheritDoc}
  $E get0(
    int index,
  ) {
    return E.fromRef(_get0(reference, index).object);
  }

  static final _set0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("COSArrayList__set0")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public E set(int index, E element)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// {@inheritDoc}
  $E set0(
    int index,
    $E element,
  ) {
    return E.fromRef(_set0(reference, index, element.reference).object);
  }

  static final _add1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("COSArrayList__add1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void add(int index, E element)
  ///
  /// {@inheritDoc}
  void add1(
    int index,
    $E element,
  ) {
    return _add1(reference, index, element.reference).check();
  }

  static final _remove1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("COSArrayList__remove1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public E remove(int index)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// {@inheritDoc}
  $E remove1(
    int index,
  ) {
    return E.fromRef(_remove1(reference, index).object);
  }

  static final _indexOf = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("COSArrayList__indexOf")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int indexOf(java.lang.Object o)
  ///
  /// {@inheritDoc}
  int indexOf(
    jni.JObject o,
  ) {
    return _indexOf(reference, o.reference).integer;
  }

  static final _lastIndexOf = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("COSArrayList__lastIndexOf")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int lastIndexOf(java.lang.Object o)
  ///
  /// {@inheritDoc}
  int lastIndexOf(
    jni.JObject o,
  ) {
    return _lastIndexOf(reference, o.reference).integer;
  }

  static final _listIterator = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "COSArrayList__listIterator")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.ListIterator<E> listIterator()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// {@inheritDoc}
  jni.JObject listIterator() {
    return const jni.JObjectType().fromRef(_listIterator(reference).object);
  }

  static final _listIterator1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("COSArrayList__listIterator1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.util.ListIterator<E> listIterator(int index)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// {@inheritDoc}
  jni.JObject listIterator1(
    int index,
  ) {
    return const jni.JObjectType()
        .fromRef(_listIterator1(reference, index).object);
  }

  static final _subList = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32)>>("COSArrayList__subList")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public java.util.List<E> subList(int fromIndex, int toIndex)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// {@inheritDoc}
  jni.JList<$E> subList(
    int fromIndex,
    int toIndex,
  ) {
    return jni.JListType(E)
        .fromRef(_subList(reference, fromIndex, toIndex).object);
  }

  static final _toString1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "COSArrayList__toString1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// {@inheritDoc}
  jni.JString toString1() {
    return const jni.JStringType().fromRef(_toString1(reference).object);
  }

  static final _getCOSArray = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "COSArrayList__getCOSArray")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public org.apache.pdfbox.cos.COSArray getCOSArray()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// This will return the underlying COSArray.
  ///@return the COSArray
  jni.JObject getCOSArray() {
    return const jni.JObjectType().fromRef(_getCOSArray(reference).object);
  }

  static final _toList = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "COSArrayList__toList")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public org.apache.pdfbox.cos.COSArray toList()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// This will return the underlying COSArray.
  ///@deprecated use \#getCOSArray() instead.
  ///@return the COSArray
  jni.JObject toList() {
    return const jni.JObjectType().fromRef(_toList(reference).object);
  }
}

final class $COSArrayListType<$E extends jni.JObject>
    extends jni.JObjType<COSArrayList<$E>> {
  final jni.JObjType<$E> E;

  const $COSArrayListType(
    this.E,
  );

  @override
  String get signature => r"Lorg/apache/pdfbox/pdmodel/common/COSArrayList;";

  @override
  COSArrayList<$E> fromRef(jni.JObjectPtr ref) => COSArrayList.fromRef(E, ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($COSArrayListType, E);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($COSArrayListType<$E>) &&
        other is $COSArrayListType<$E> &&
        E == other.E;
  }
}
