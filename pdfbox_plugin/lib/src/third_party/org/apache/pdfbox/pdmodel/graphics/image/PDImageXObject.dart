// Generated from Apache PDFBox library which is licensed under the Apache License 2.0.
// The following copyright from the original authors applies.
//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "../../PDDocument.dart" as pddocument_;
import "../../../../../../_init.dart";

/// from: org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject
///
/// An Image XObject.
///@author John Hewson
///@author Ben Litchfield
class PDImageXObject extends jni.JObject {
  @override
  late final jni.JObjType<PDImageXObject> $type = type;

  PDImageXObject.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $PDImageXObjectType();
  static final _new0 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDImageXObject__new0")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(org.apache.pdfbox.pdmodel.PDDocument document)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Creates an Image XObject in the given document. This constructor is for internal PDFBox use
  /// and is not for PDF generation. Users who want to create images should look at \#createFromFileByExtension(File, PDDocument).
  ///@param document the current document
  ///@throws java.io.IOException if there is an error creating the XObject.
  factory PDImageXObject(
    pddocument_.PDDocument document,
  ) {
    return PDImageXObject.fromRef(_new0(document.reference).object);
  }

  static final _new1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("PDImageXObject__new1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(org.apache.pdfbox.pdmodel.PDDocument document, java.io.InputStream encodedStream, org.apache.pdfbox.cos.COSBase cosFilter, int width, int height, int bitsPerComponent, org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace initColorSpace)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Creates an Image XObject in the given document using the given filtered stream. This
  /// constructor is for internal PDFBox use and is not for PDF generation. Users who want to
  /// create images should look at \#createFromFileByExtension(File, PDDocument).
  ///@param document the current document
  ///@param encodedStream an encoded stream of image data
  ///@param cosFilter the filter or a COSArray of filters
  ///@param width the image width
  ///@param height the image height
  ///@param bitsPerComponent the bits per component
  ///@param initColorSpace the color space
  ///@throws IOException if there is an error creating the XObject.
  factory PDImageXObject.new1(
    pddocument_.PDDocument document,
    jni.JObject encodedStream,
    jni.JObject cosFilter,
    int width,
    int height,
    int bitsPerComponent,
    jni.JObject initColorSpace,
  ) {
    return PDImageXObject.fromRef(_new1(
            document.reference,
            encodedStream.reference,
            cosFilter.reference,
            width,
            height,
            bitsPerComponent,
            initColorSpace.reference)
        .object);
  }

  static final _new2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDImageXObject__new2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(org.apache.pdfbox.pdmodel.common.PDStream stream, org.apache.pdfbox.pdmodel.PDResources resources)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Creates an Image XObject with the given stream as its contents and current color spaces. This
  /// constructor is for internal PDFBox use and is not for PDF generation. Users who want to
  /// create images should look at \#createFromFileByExtension(File, PDDocument).
  ///@param stream the XObject stream to read
  ///@param resources the current resources
  ///@throws java.io.IOException if there is an error creating the XObject.
  factory PDImageXObject.new2(
    jni.JObject stream,
    jni.JObject resources,
  ) {
    return PDImageXObject.fromRef(
        _new2(stream.reference, resources.reference).object);
  }

  static final _createThumbnail = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDImageXObject__createThumbnail")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject createThumbnail(org.apache.pdfbox.cos.COSStream cosStream)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Creates a thumbnail Image XObject from the given COSBase and name.
  ///@param cosStream the COS stream
  ///@return an XObject
  ///@throws IOException if there is an error creating the XObject.
  static PDImageXObject createThumbnail(
    jni.JObject cosStream,
  ) {
    return const $PDImageXObjectType()
        .fromRef(_createThumbnail(cosStream.reference).object);
  }

  static final _createFromFile = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDImageXObject__createFromFile")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject createFromFile(java.lang.String imagePath, org.apache.pdfbox.pdmodel.PDDocument doc)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Create a PDImageXObject from an image file, see \#createFromFileByExtension(File, PDDocument) for
  /// more details.
  ///@param imagePath the image file path.
  ///@param doc the document that shall use this PDImageXObject.
  ///@return a PDImageXObject.
  ///@throws IOException if there is an error when reading the file or creating the
  /// PDImageXObject, or if the image type is not supported.
  static PDImageXObject createFromFile(
    jni.JString imagePath,
    pddocument_.PDDocument doc,
  ) {
    return const $PDImageXObjectType()
        .fromRef(_createFromFile(imagePath.reference, doc.reference).object);
  }

  static final _createFromFileByExtension = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "PDImageXObject__createFromFileByExtension")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject createFromFileByExtension(java.io.File file, org.apache.pdfbox.pdmodel.PDDocument doc)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Create a PDImageXObject from an image file. The file format is determined by the file name
  /// suffix. The following suffixes are supported: JPG, JPEG, TIF, TIFF, GIF, BMP and PNG. This is
  /// a convenience method that calls JPEGFactory\#createFromStream,
  /// CCITTFactory\#createFromFile or ImageIO\#read combined with
  /// LosslessFactory\#createFromImage. (The later can also be used to create a
  /// PDImageXObject from a BufferedImage). Starting with 2.0.18, this call will create an image
  /// directly from a PNG file without decoding it (when possible), which is faster. However the
  /// result size depends on the compression skill of the software that created the PNG file. If
  /// file size or bandwidth are important to you or to your clients, then create your PNG files
  /// with a tool that has implemented the
  /// <a href="https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/">Zopfli
  /// algorithm</a>, or use the two-step process mentioned above.
  ///@param file the image file.
  ///@param doc the document that shall use this PDImageXObject.
  ///@return a PDImageXObject.
  ///@throws IOException if there is an error when reading the file or creating the
  /// PDImageXObject.
  ///@throws IllegalArgumentException if the image type is not supported.
  static PDImageXObject createFromFileByExtension(
    jni.JObject file,
    pddocument_.PDDocument doc,
  ) {
    return const $PDImageXObjectType().fromRef(
        _createFromFileByExtension(file.reference, doc.reference).object);
  }

  static final _createFromFileByContent = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "PDImageXObject__createFromFileByContent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject createFromFileByContent(java.io.File file, org.apache.pdfbox.pdmodel.PDDocument doc)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Create a PDImageXObject from an image file. The file format is determined by the file
  /// content. The following file types are supported: JPG, JPEG, TIF, TIFF, GIF, BMP and PNG. This
  /// is a convenience method that calls JPEGFactory\#createFromStream,
  /// CCITTFactory\#createFromFile or ImageIO\#read combined with
  /// LosslessFactory\#createFromImage. (The later can also be used to create a
  /// PDImageXObject from a BufferedImage). Starting with 2.0.18, this call will create an image
  /// directly from a png file without decoding it (when possible), which is faster. However the
  /// result size depends on the compression skill of the software that created the PNG file. If
  /// file size or bandwidth are important to you or to your clients, then create your PNG files
  /// with a tool that has implemented the
  /// <a href="https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/">Zopfli
  /// algorithm</a>, or use the two-step process mentioned above.
  ///@param file the image file.
  ///@param doc the document that shall use this PDImageXObject.
  ///@return a PDImageXObject.
  ///@throws IOException if there is an error when reading the file or creating the
  /// PDImageXObject.
  ///@throws IllegalArgumentException if the image type is not supported.
  static PDImageXObject createFromFileByContent(
    jni.JObject file,
    pddocument_.PDDocument doc,
  ) {
    return const $PDImageXObjectType().fromRef(
        _createFromFileByContent(file.reference, doc.reference).object);
  }

  static final _createFromByteArray = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "PDImageXObject__createFromByteArray")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject createFromByteArray(org.apache.pdfbox.pdmodel.PDDocument document, byte[] byteArray, java.lang.String name)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Create a PDImageXObject from bytes of an image file. The file format is determined by the
  /// file content. The following file types are supported: JPG, JPEG, TIF, TIFF, GIF, BMP and PNG.
  /// This is a convenience method that calls JPEGFactory\#createFromByteArray,
  /// CCITTFactory\#createFromFile or ImageIO\#read combined with
  /// LosslessFactory\#createFromImage. (The later can also be used to create a
  /// PDImageXObject from a BufferedImage). Starting with 2.0.18, this call will create an image
  /// directly from a PNG file without decoding it (when possible), which is faster. However the
  /// result size depends on the compression skill of the software that created the PNG file. If
  /// file size or bandwidth are important to you or to your clients, then create your PNG files
  /// with a tool that has implemented the
  /// <a href="https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/">Zopfli
  /// algorithm</a>, or use the two-step process mentioned above.
  ///@param byteArray bytes from an image file.
  ///@param document the document that shall use this PDImageXObject.
  ///@param name name of image file for exception messages, can be null.
  ///@return a PDImageXObject.
  ///@throws IOException if there is an error when reading the file or creating the
  /// PDImageXObject.
  ///@throws IllegalArgumentException if the image type is not supported.
  static PDImageXObject createFromByteArray(
    pddocument_.PDDocument document,
    jni.JArray<jni.jbyte> byteArray,
    jni.JString name,
  ) {
    return const $PDImageXObjectType().fromRef(_createFromByteArray(
            document.reference, byteArray.reference, name.reference)
        .object);
  }

  static final _getMetadata = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDImageXObject__getMetadata")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public org.apache.pdfbox.pdmodel.common.PDMetadata getMetadata()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Returns the metadata associated with this XObject, or null if there is none.
  ///@return the metadata associated with this object.
  jni.JObject getMetadata() {
    return const jni.JObjectType().fromRef(_getMetadata(reference).object);
  }

  static final _setMetadata = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDImageXObject__setMetadata")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setMetadata(org.apache.pdfbox.pdmodel.common.PDMetadata meta)
  ///
  /// Sets the metadata associated with this XObject, or null if there is none.
  ///@param meta the metadata associated with this object
  void setMetadata(
    jni.JObject meta,
  ) {
    return _setMetadata(reference, meta.reference).check();
  }

  static final _getStructParent = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDImageXObject__getStructParent")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getStructParent()
  ///
  /// Returns the key of this XObject in the structural parent tree.
  ///@return this object's key the structural parent tree or -1 if there isn't any.
  int getStructParent() {
    return _getStructParent(reference).integer;
  }

  static final _setStructParent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("PDImageXObject__setStructParent")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setStructParent(int key)
  ///
  /// Sets the key of this XObject in the structural parent tree.
  ///@param key the new key for this XObject
  void setStructParent(
    int key,
  ) {
    return _setStructParent(reference, key).check();
  }

  static final _getImage = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDImageXObject__getImage")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.awt.image.BufferedImage getImage()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// {@inheritDoc}
  /// The returned images are cached via a SoftReference.
  jni.JObject getImage() {
    return const jni.JObjectType().fromRef(_getImage(reference).object);
  }

  static final _getImage1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("PDImageXObject__getImage1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.awt.image.BufferedImage getImage(java.awt.Rectangle region, int subsampling)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// {@inheritDoc}
  jni.JObject getImage1(
    jni.JObject region,
    int subsampling,
  ) {
    return const jni.JObjectType()
        .fromRef(_getImage1(reference, region.reference, subsampling).object);
  }

  static final _getRawImage = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDImageXObject__getRawImage")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.awt.image.BufferedImage getRawImage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getRawImage() {
    return const jni.JObjectType().fromRef(_getRawImage(reference).object);
  }

  static final _getRawRaster = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDImageXObject__getRawRaster")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.awt.image.WritableRaster getRawRaster()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getRawRaster() {
    return const jni.JObjectType().fromRef(_getRawRaster(reference).object);
  }

  static final _getStencilImage = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDImageXObject__getStencilImage")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.awt.image.BufferedImage getStencilImage(java.awt.Paint paint)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// {@inheritDoc}
  /// The returned images are not cached.
  jni.JObject getStencilImage(
    jni.JObject paint,
  ) {
    return const jni.JObjectType()
        .fromRef(_getStencilImage(reference, paint.reference).object);
  }

  static final _getOpaqueImage = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDImageXObject__getOpaqueImage")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.awt.image.BufferedImage getOpaqueImage()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Returns an RGB buffered image containing the opaque image stream without any masks applied.
  /// If this Image XObject is a mask then the buffered image will contain the raw mask.
  ///@return the image without any masks applied
  ///@throws IOException if the image cannot be read
  jni.JObject getOpaqueImage() {
    return const jni.JObjectType().fromRef(_getOpaqueImage(reference).object);
  }

  static final _getMask = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDImageXObject__getMask")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject getMask()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Returns the Mask Image XObject associated with this image, or null if there is none.
  ///@return Mask Image XObject
  ///@throws java.io.IOException
  PDImageXObject getMask() {
    return const $PDImageXObjectType().fromRef(_getMask(reference).object);
  }

  static final _getColorKeyMask = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDImageXObject__getColorKeyMask")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public org.apache.pdfbox.cos.COSArray getColorKeyMask()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Returns the color key mask array associated with this image, or null if there is none.
  ///@return Mask Image XObject
  jni.JObject getColorKeyMask() {
    return const jni.JObjectType().fromRef(_getColorKeyMask(reference).object);
  }

  static final _getSoftMask = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDImageXObject__getSoftMask")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject getSoftMask()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Returns the Soft Mask Image XObject associated with this image, or null if there is none.
  ///@return the SMask Image XObject, or null.
  ///@throws java.io.IOException
  PDImageXObject getSoftMask() {
    return const $PDImageXObjectType().fromRef(_getSoftMask(reference).object);
  }

  static final _getBitsPerComponent = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDImageXObject__getBitsPerComponent")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getBitsPerComponent()
  int getBitsPerComponent() {
    return _getBitsPerComponent(reference).integer;
  }

  static final _setBitsPerComponent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("PDImageXObject__setBitsPerComponent")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setBitsPerComponent(int bpc)
  void setBitsPerComponent(
    int bpc,
  ) {
    return _setBitsPerComponent(reference, bpc).check();
  }

  static final _getColorSpace = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDImageXObject__getColorSpace")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace getColorSpace()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getColorSpace() {
    return const jni.JObjectType().fromRef(_getColorSpace(reference).object);
  }

  static final _createInputStream = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDImageXObject__createInputStream")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.io.InputStream createInputStream()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject createInputStream() {
    return const jni.JObjectType()
        .fromRef(_createInputStream(reference).object);
  }

  static final _createInputStream1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDImageXObject__createInputStream1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.io.InputStream createInputStream(org.apache.pdfbox.filter.DecodeOptions options)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject createInputStream1(
    jni.JObject options,
  ) {
    return const jni.JObjectType()
        .fromRef(_createInputStream1(reference, options.reference).object);
  }

  static final _createInputStream2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDImageXObject__createInputStream2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.io.InputStream createInputStream(java.util.List<java.lang.String> stopFilters)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject createInputStream2(
    jni.JList<jni.JString> stopFilters,
  ) {
    return const jni.JObjectType()
        .fromRef(_createInputStream2(reference, stopFilters.reference).object);
  }

  static final _isEmpty = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDImageXObject__isEmpty")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isEmpty()
  bool isEmpty() {
    return _isEmpty(reference).boolean;
  }

  static final _setColorSpace = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDImageXObject__setColorSpace")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace cs)
  void setColorSpace(
    jni.JObject cs,
  ) {
    return _setColorSpace(reference, cs.reference).check();
  }

  static final _getHeight = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDImageXObject__getHeight")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getHeight()
  int getHeight() {
    return _getHeight(reference).integer;
  }

  static final _setHeight = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("PDImageXObject__setHeight")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setHeight(int h)
  void setHeight(
    int h,
  ) {
    return _setHeight(reference, h).check();
  }

  static final _getWidth = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDImageXObject__getWidth")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getWidth()
  int getWidth() {
    return _getWidth(reference).integer;
  }

  static final _setWidth = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("PDImageXObject__setWidth")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setWidth(int w)
  void setWidth(
    int w,
  ) {
    return _setWidth(reference, w).check();
  }

  static final _getInterpolate = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDImageXObject__getInterpolate")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean getInterpolate()
  bool getInterpolate() {
    return _getInterpolate(reference).boolean;
  }

  static final _setInterpolate = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("PDImageXObject__setInterpolate")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setInterpolate(boolean value)
  void setInterpolate(
    bool value,
  ) {
    return _setInterpolate(reference, value ? 1 : 0).check();
  }

  static final _setDecode = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDImageXObject__setDecode")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setDecode(org.apache.pdfbox.cos.COSArray decode)
  void setDecode(
    jni.JObject decode,
  ) {
    return _setDecode(reference, decode.reference).check();
  }

  static final _getDecode = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDImageXObject__getDecode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public org.apache.pdfbox.cos.COSArray getDecode()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDecode() {
    return const jni.JObjectType().fromRef(_getDecode(reference).object);
  }

  static final _isStencil = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDImageXObject__isStencil")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isStencil()
  bool isStencil() {
    return _isStencil(reference).boolean;
  }

  static final _setStencil = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("PDImageXObject__setStencil")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setStencil(boolean isStencil)
  void setStencil(
    bool isStencil,
  ) {
    return _setStencil(reference, isStencil ? 1 : 0).check();
  }

  static final _getSuffix = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDImageXObject__getSuffix")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getSuffix()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// This will get the suffix for this image type, e.g. jpg/png.
  ///@return The image suffix or null if not available.
  jni.JString getSuffix() {
    return const jni.JStringType().fromRef(_getSuffix(reference).object);
  }

  static final _getOptionalContent = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDImageXObject__getOptionalContent")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList getOptionalContent()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// This will get the optional content group or optional content membership dictionary.
  ///@return The optional content group or optional content membership dictionary or null if there
  /// is none.
  jni.JObject getOptionalContent() {
    return const jni.JObjectType()
        .fromRef(_getOptionalContent(reference).object);
  }

  static final _setOptionalContent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDImageXObject__setOptionalContent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setOptionalContent(org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList oc)
  ///
  /// Sets the optional content group or optional content membership dictionary.
  ///@param oc The optional content group or optional content membership dictionary.
  void setOptionalContent(
    jni.JObject oc,
  ) {
    return _setOptionalContent(reference, oc.reference).check();
  }
}

final class $PDImageXObjectType extends jni.JObjType<PDImageXObject> {
  const $PDImageXObjectType();

  @override
  String get signature =>
      r"Lorg/apache/pdfbox/pdmodel/graphics/image/PDImageXObject;";

  @override
  PDImageXObject fromRef(jni.JObjectPtr ref) => PDImageXObject.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PDImageXObjectType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PDImageXObjectType) &&
        other is $PDImageXObjectType;
  }
}
