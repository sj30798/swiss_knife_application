// Generated from Apache PDFBox library which is licensed under the Apache License 2.0.
// The following copyright from the original authors applies.
//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "PDFunction.dart" as pdfunction_;

import "../PDRange.dart" as pdrange_;
import "../../../../../../_init.dart";

/// from: org.apache.pdfbox.pdmodel.common.function.PDFunctionType0
///
/// This class represents a type 0 function in a PDF document.
///@author Ben Litchfield
///@author Tilman Hausherr
class PDFunctionType0 extends pdfunction_.PDFunction {
  @override
  late final jni.JObjType<PDFunctionType0> $type = type;

  PDFunctionType0.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $PDFunctionType0Type();
  static final _new0 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDFunctionType0__new0")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(org.apache.pdfbox.cos.COSBase function)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Constructor.
  ///@param function The function.
  factory PDFunctionType0(
    jni.JObject function,
  ) {
    return PDFunctionType0.fromRef(_new0(function.reference).object);
  }

  static final _getFunctionType = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDFunctionType0__getFunctionType")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getFunctionType()
  ///
  /// {@inheritDoc}
  int getFunctionType() {
    return _getFunctionType(reference).integer;
  }

  static final _getSize = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDFunctionType0__getSize")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public org.apache.pdfbox.cos.COSArray getSize()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// The "Size" entry, which is the number of samples in each input dimension
  /// of the sample table.
  ///@return A List of java.lang.Integer objects.
  jni.JObject getSize() {
    return const jni.JObjectType().fromRef(_getSize(reference).object);
  }

  static final _getBitsPerSample = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDFunctionType0__getBitsPerSample")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getBitsPerSample()
  ///
  /// Get the number of bits that the output value will take up.
  ///
  /// Valid values are 1,2,4,8,12,16,24,32.
  ///@return Number of bits for each output value.
  int getBitsPerSample() {
    return _getBitsPerSample(reference).integer;
  }

  static final _getOrder = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDFunctionType0__getOrder")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getOrder()
  ///
  /// Get the order of interpolation between samples. Valid values are 1 and 3,
  /// specifying linear and cubic spline interpolation, respectively. Default
  /// is 1. See p.170 in PDF spec 1.7.
  ///@return order of interpolation.
  int getOrder() {
    return _getOrder(reference).integer;
  }

  static final _setBitsPerSample = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("PDFunctionType0__setBitsPerSample")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setBitsPerSample(int bps)
  ///
  /// Set the number of bits that the output value will take up. Valid values
  /// are 1,2,4,8,12,16,24,32.
  ///@param bps The number of bits for each output value.
  void setBitsPerSample(
    int bps,
  ) {
    return _setBitsPerSample(reference, bps).check();
  }

  static final _getEncodeForParameter = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("PDFunctionType0__getEncodeForParameter")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public org.apache.pdfbox.pdmodel.common.PDRange getEncodeForParameter(int paramNum)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Get the encode for the input parameter.
  ///@param paramNum The function parameter number.
  ///@return The encode parameter range or null if none is set.
  pdrange_.PDRange getEncodeForParameter(
    int paramNum,
  ) {
    return const pdrange_.$PDRangeType()
        .fromRef(_getEncodeForParameter(reference, paramNum).object);
  }

  static final _setEncodeValues = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDFunctionType0__setEncodeValues")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setEncodeValues(org.apache.pdfbox.cos.COSArray encodeValues)
  ///
  /// This will set the encode values.
  ///@param encodeValues The new encode values.
  void setEncodeValues(
    jni.JObject encodeValues,
  ) {
    return _setEncodeValues(reference, encodeValues.reference).check();
  }

  static final _getDecodeForParameter = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("PDFunctionType0__getDecodeForParameter")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public org.apache.pdfbox.pdmodel.common.PDRange getDecodeForParameter(int paramNum)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Get the decode for the input parameter.
  ///@param paramNum The function parameter number.
  ///@return The decode parameter range or null if none is set.
  pdrange_.PDRange getDecodeForParameter(
    int paramNum,
  ) {
    return const pdrange_.$PDRangeType()
        .fromRef(_getDecodeForParameter(reference, paramNum).object);
  }

  static final _setDecodeValues = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDFunctionType0__setDecodeValues")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setDecodeValues(org.apache.pdfbox.cos.COSArray decodeValues)
  ///
  /// This will set the decode values.
  ///@param decodeValues The new decode values.
  void setDecodeValues(
    jni.JObject decodeValues,
  ) {
    return _setDecodeValues(reference, decodeValues.reference).check();
  }

  static final _eval1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDFunctionType0__eval1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public float[] eval(float[] input)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// {@inheritDoc}
  jni.JArray<jni.jfloat> eval1(
    jni.JArray<jni.jfloat> input,
  ) {
    return const jni.JArrayType(jni.jfloatType())
        .fromRef(_eval1(reference, input.reference).object);
  }
}

final class $PDFunctionType0Type extends jni.JObjType<PDFunctionType0> {
  const $PDFunctionType0Type();

  @override
  String get signature =>
      r"Lorg/apache/pdfbox/pdmodel/common/function/PDFunctionType0;";

  @override
  PDFunctionType0 fromRef(jni.JObjectPtr ref) => PDFunctionType0.fromRef(ref);

  @override
  jni.JObjType get superType => const pdfunction_.$PDFunctionType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($PDFunctionType0Type).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PDFunctionType0Type) &&
        other is $PDFunctionType0Type;
  }
}
