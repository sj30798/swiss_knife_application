// Generated from Apache PDFBox library which is licensed under the Apache License 2.0.
// The following copyright from the original authors applies.
//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "PDDocument.dart" as pddocument_;

import "PDPage.dart" as pdpage_;

import "graphics/image/PDImageXObject.dart" as pdimagexobject_;
import "../../../../_init.dart";

/// from: org.apache.pdfbox.pdmodel.PDPageContentStream
///
/// Provides the ability to write to a page content stream.
///@author Ben Litchfield
class PDPageContentStream extends jni.JObject {
  @override
  late final jni.JObjType<PDPageContentStream> $type = type;

  PDPageContentStream.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $PDPageContentStreamType();
  static final _new0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDPageContentStream__new0")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(org.apache.pdfbox.pdmodel.PDDocument document, org.apache.pdfbox.pdmodel.PDPage sourcePage)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Create a new PDPage content stream. This constructor overwrites all existing content streams
  /// of this page.
  ///@param document The document the page is part of.
  ///@param sourcePage The page to write the contents to.
  ///@throws IOException If there is an error writing to the page contents.
  factory PDPageContentStream(
    pddocument_.PDDocument document,
    pdpage_.PDPage sourcePage,
  ) {
    return PDPageContentStream.fromRef(
        _new0(document.reference, sourcePage.reference).object);
  }

  static final _new1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Uint8,
                  ffi.Uint8)>>("PDPageContentStream__new1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public void <init>(org.apache.pdfbox.pdmodel.PDDocument document, org.apache.pdfbox.pdmodel.PDPage sourcePage, boolean appendContent, boolean compress)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Create a new PDPage content stream.
  ///@param document The document the page is part of.
  ///@param sourcePage The page to write the contents to.
  ///@param appendContent Indicates whether content will be overwritten. If false all previous
  ///                      content is deleted.
  ///@param compress Tell if the content stream should compress the page contents.
  ///@throws IOException If there is an error writing to the page contents.
  ///@deprecated use \#PDPageContentStream(PDDocument, PDPage, PDPageContentStream.AppendMode, boolean)
  factory PDPageContentStream.new1(
    pddocument_.PDDocument document,
    pdpage_.PDPage sourcePage,
    bool appendContent,
    bool compress,
  ) {
    return PDPageContentStream.fromRef(_new1(document.reference,
            sourcePage.reference, appendContent ? 1 : 0, compress ? 1 : 0)
        .object);
  }

  static final _new2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("PDPageContentStream__new2")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void <init>(org.apache.pdfbox.pdmodel.PDDocument document, org.apache.pdfbox.pdmodel.PDPage sourcePage, org.apache.pdfbox.pdmodel.PDPageContentStream.AppendMode appendContent, boolean compress)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Create a new PDPage content stream. If the appendContent parameter is set to
  /// AppendMode\#APPEND, you may want to use
  /// \#PDPageContentStream(PDDocument, PDPage, PDPageContentStream.AppendMode, boolean, boolean)
  /// instead, with the fifth parameter set to true.
  ///@param document The document the page is part of.
  ///@param sourcePage The page to write the contents to.
  ///@param appendContent Indicates whether content will be overwritten, appended or prepended.
  ///@param compress Tell if the content stream should compress the page contents.
  ///@throws IOException If there is an error writing to the page contents.
  factory PDPageContentStream.new2(
    pddocument_.PDDocument document,
    pdpage_.PDPage sourcePage,
    PDPageContentStream_AppendMode appendContent,
    bool compress,
  ) {
    return PDPageContentStream.fromRef(_new2(document.reference,
            sourcePage.reference, appendContent.reference, compress ? 1 : 0)
        .object);
  }

  static final _new3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Uint8,
                  ffi.Uint8,
                  ffi.Uint8)>>("PDPageContentStream__new3")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public void <init>(org.apache.pdfbox.pdmodel.PDDocument document, org.apache.pdfbox.pdmodel.PDPage sourcePage, boolean appendContent, boolean compress, boolean resetContext)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Create a new PDPage content stream.
  ///@param document The document the page is part of.
  ///@param sourcePage The page to write the contents to.
  ///@param appendContent Indicates whether content will be overwritten. If false all previous
  ///                      content is deleted.
  ///@param compress Tell if the content stream should compress the page contents.
  ///@param resetContext Tell if the graphic context should be reset. You should use this when
  /// appending to an existing stream, because the existing stream may have changed graphic
  /// properties (e.g. scaling, rotation).
  ///@throws IOException If there is an error writing to the page contents.
  ///@deprecated use \#PDPageContentStream(PDDocument, PDPage, PDPageContentStream.AppendMode, boolean, boolean)
  factory PDPageContentStream.new3(
    pddocument_.PDDocument document,
    pdpage_.PDPage sourcePage,
    bool appendContent,
    bool compress,
    bool resetContext,
  ) {
    return PDPageContentStream.fromRef(_new3(
            document.reference,
            sourcePage.reference,
            appendContent ? 1 : 0,
            compress ? 1 : 0,
            resetContext ? 1 : 0)
        .object);
  }

  static final _new4 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Uint8,
                  ffi.Uint8)>>("PDPageContentStream__new4")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public void <init>(org.apache.pdfbox.pdmodel.PDDocument document, org.apache.pdfbox.pdmodel.PDPage sourcePage, org.apache.pdfbox.pdmodel.PDPageContentStream.AppendMode appendContent, boolean compress, boolean resetContext)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Create a new PDPage content stream.
  ///@param document The document the page is part of.
  ///@param sourcePage The page to write the contents to.
  ///@param appendContent Indicates whether content will be overwritten, appended or prepended.
  ///@param compress Tell if the content stream should compress the page contents.
  ///@param resetContext Tell if the graphic context should be reset. This is only relevant when
  /// the appendContent parameter is set to AppendMode\#APPEND. You should use this when
  /// appending to an existing stream, because the existing stream may have changed graphic
  /// properties (e.g. scaling, rotation).
  ///@throws IOException If there is an error writing to the page contents.
  factory PDPageContentStream.new4(
    pddocument_.PDDocument document,
    pdpage_.PDPage sourcePage,
    PDPageContentStream_AppendMode appendContent,
    bool compress,
    bool resetContext,
  ) {
    return PDPageContentStream.fromRef(_new4(
            document.reference,
            sourcePage.reference,
            appendContent.reference,
            compress ? 1 : 0,
            resetContext ? 1 : 0)
        .object);
  }

  static final _new5 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDPageContentStream__new5")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(org.apache.pdfbox.pdmodel.PDDocument doc, org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream appearance)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Create a new appearance stream. Note that this is not actually a "page" content stream.
  ///@param doc The document the page is part of.
  ///@param appearance The appearance stream to write to.
  ///@throws IOException If there is an error writing to the page contents.
  factory PDPageContentStream.new5(
    pddocument_.PDDocument doc,
    jni.JObject appearance,
  ) {
    return PDPageContentStream.fromRef(
        _new5(doc.reference, appearance.reference).object);
  }

  static final _new6 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDPageContentStream__new6")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(org.apache.pdfbox.pdmodel.PDDocument doc, org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream appearance, java.io.OutputStream outputStream)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Create a new appearance stream. Note that this is not actually a "page" content stream.
  ///@param doc The document the appearance is part of.
  ///@param appearance The appearance stream to add to.
  ///@param outputStream The appearances output stream to write to.
  ///@throws IOException If there is an error writing to the page contents.
  factory PDPageContentStream.new6(
    pddocument_.PDDocument doc,
    jni.JObject appearance,
    jni.JObject outputStream,
  ) {
    return PDPageContentStream.fromRef(
        _new6(doc.reference, appearance.reference, outputStream.reference)
            .object);
  }

  static final _new7 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDPageContentStream__new7")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(org.apache.pdfbox.pdmodel.PDDocument doc, org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject form, java.io.OutputStream outputStream)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Create a new appearance stream. Note that this is not actually a "page" content stream.
  ///@param doc The document the appearance is part of.
  ///@param form The XObject form to add to.
  ///@param outputStream The output stream to write to.
  ///@throws IOException If there is an error writing to the page contents.
  factory PDPageContentStream.new7(
    pddocument_.PDDocument doc,
    jni.JObject form,
    jni.JObject outputStream,
  ) {
    return PDPageContentStream.fromRef(
        _new7(doc.reference, form.reference, outputStream.reference).object);
  }

  static final _new8 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDPageContentStream__new8")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(org.apache.pdfbox.pdmodel.PDDocument doc, org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern pattern, java.io.OutputStream outputStream)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Create a new appearance stream. Note that this is not actually a "page" content stream.
  ///@param doc The document the appearance is part of.
  ///@param pattern The pattern to add to.
  ///@param outputStream The output stream to write to.
  ///@throws IOException If there is an error writing to the page contents.
  factory PDPageContentStream.new8(
    pddocument_.PDDocument doc,
    jni.JObject pattern,
    jni.JObject outputStream,
  ) {
    return PDPageContentStream.fromRef(
        _new8(doc.reference, pattern.reference, outputStream.reference).object);
  }

  static final _beginText = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__beginText")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void beginText()
  ///
  /// Begin some text operations.
  ///@throws IOException If there is an error writing to the stream or if you attempt to
  ///         nest beginText calls.
  ///@throws IllegalStateException If the method was not allowed to be called at this time.
  void beginText() {
    return _beginText(reference).check();
  }

  static final _endText = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__endText")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void endText()
  ///
  /// End some text operations.
  ///@throws IOException If there is an error writing to the stream or if you attempt to
  ///         nest endText calls.
  ///@throws IllegalStateException If the method was not allowed to be called at this time.
  void endText() {
    return _endText(reference).check();
  }

  static final _setFont = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Float)>>("PDPageContentStream__setFont")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, double)>();

  /// from: public void setFont(org.apache.pdfbox.pdmodel.font.PDFont font, float fontSize)
  ///
  /// Set the font and font size to draw text with.
  ///@param font The font to use.
  ///@param fontSize The font size to draw the text.
  ///@throws IOException If there is an error writing the font information.
  void setFont(
    jni.JObject font,
    double fontSize,
  ) {
    return _setFont(reference, font.reference, fontSize).check();
  }

  static final _drawString = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDPageContentStream__drawString")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void drawString(java.lang.String text)
  ///
  /// This will draw a string at the current location on the screen.
  ///@param text The text to draw.
  ///@throws IOException If an io exception occurs.
  ///@deprecated Use \#showText instead.
  void drawString(
    jni.JString text,
  ) {
    return _drawString(reference, text.reference).check();
  }

  static final _showTextWithPositioning = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__showTextWithPositioning")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void showTextWithPositioning(java.lang.Object[] textWithPositioningArray)
  ///
  /// Shows the given text at the location specified by the current text matrix with the given
  /// interspersed positioning. This allows the user to efficiently position each glyph or sequence
  /// of glyphs.
  ///@param textWithPositioningArray An array consisting of String and Float types. Each String is
  /// output to the page using the current text matrix. Using the default coordinate system, each
  /// interspersed number adjusts the current text matrix by translating to the left or down for
  /// horizontal and vertical text respectively. The number is expressed in thousands of a text
  /// space unit, and may be negative.
  ///@throws IOException if an io exception occurs.
  void showTextWithPositioning(
    jni.JArray<jni.JObject> textWithPositioningArray,
  ) {
    return _showTextWithPositioning(
            reference, textWithPositioningArray.reference)
        .check();
  }

  static final _showText = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDPageContentStream__showText")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void showText(java.lang.String text)
  ///
  /// Shows the given text at the location specified by the current text matrix.
  ///@param text The Unicode text to show.
  ///@throws IOException If an io exception occurs.
  ///@throws IllegalArgumentException if a character isn't supported by the current font
  void showText(
    jni.JString text,
  ) {
    return _showText(reference, text.reference).check();
  }

  static final _showTextInternal = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__showTextInternal")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected void showTextInternal(java.lang.String text)
  ///
  /// Outputs a string using the correct encoding and subsetting as required.
  ///@param text The Unicode text to show.
  ///@throws IOException If an io exception occurs.
  void showTextInternal(
    jni.JString text,
  ) {
    return _showTextInternal(reference, text.reference).check();
  }

  static final _setLeading = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Double)>>("PDPageContentStream__setLeading")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, double)>();

  /// from: public void setLeading(double leading)
  ///
  /// Sets the text leading.
  ///@param leading The leading in unscaled text units.
  ///@throws IOException If there is an error writing to the stream.
  ///@deprecated use \#setLeading(float) setLeading(float)
  void setLeading(
    double leading,
  ) {
    return _setLeading(reference, leading).check();
  }

  static final _setLeading1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Float)>>("PDPageContentStream__setLeading1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, double)>();

  /// from: public void setLeading(float leading)
  ///
  /// Sets the text leading.
  ///@param leading The leading in unscaled text units.
  ///@throws IOException If there is an error writing to the stream.
  void setLeading1(
    double leading,
  ) {
    return _setLeading1(reference, leading).check();
  }

  static final _newLine = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__newLine")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void newLine()
  ///
  /// Move to the start of the next line of text. Requires the leading (see \#setLeading)
  /// to have been set.
  ///@throws IOException If there is an error writing to the stream.
  void newLine() {
    return _newLine(reference).check();
  }

  static final _moveTextPositionByAmount = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Float,
                  ffi.Float)>>("PDPageContentStream__moveTextPositionByAmount")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, double, double)>();

  /// from: public void moveTextPositionByAmount(float tx, float ty)
  ///
  /// The Td operator.
  /// A current text matrix will be replaced with a new one (1 0 0 1 x y).
  ///@param tx The x translation.
  ///@param ty The y translation.
  ///@throws IOException If there is an error writing to the stream.
  ///@deprecated Use \#newLineAtOffset instead.
  void moveTextPositionByAmount(
    double tx,
    double ty,
  ) {
    return _moveTextPositionByAmount(reference, tx, ty).check();
  }

  static final _newLineAtOffset = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Float,
                  ffi.Float)>>("PDPageContentStream__newLineAtOffset")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, double, double)>();

  /// from: public void newLineAtOffset(float tx, float ty)
  ///
  /// The Td operator.
  /// Move to the start of the next line, offset from the start of the current line by (tx, ty).
  ///@param tx The x translation.
  ///@param ty The y translation.
  ///@throws IOException If there is an error writing to the stream.
  ///@throws IllegalStateException If the method was not allowed to be called at this time.
  void newLineAtOffset(
    double tx,
    double ty,
  ) {
    return _newLineAtOffset(reference, tx, ty).check();
  }

  static final _setTextMatrix = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Double,
                  ffi.Double,
                  ffi.Double,
                  ffi.Double,
                  ffi.Double,
                  ffi.Double)>>("PDPageContentStream__setTextMatrix")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, double, double, double,
              double, double, double)>();

  /// from: public void setTextMatrix(double a, double b, double c, double d, double e, double f)
  ///
  /// The Tm operator. Sets the text matrix to the given values.
  /// A current text matrix will be replaced with the new one.
  ///@param a The a value of the matrix.
  ///@param b The b value of the matrix.
  ///@param c The c value of the matrix.
  ///@param d The d value of the matrix.
  ///@param e The e value of the matrix.
  ///@param f The f value of the matrix.
  ///@throws IOException If there is an error writing to the stream.
  ///@deprecated Use \#setTextMatrix(Matrix) instead.
  void setTextMatrix(
    double a,
    double b,
    double c,
    double d,
    double e,
    double f,
  ) {
    return _setTextMatrix(reference, a, b, c, d, e, f).check();
  }

  static final _setTextMatrix1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__setTextMatrix1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setTextMatrix(java.awt.geom.AffineTransform matrix)
  ///
  /// The Tm operator. Sets the text matrix to the given values.
  /// A current text matrix will be replaced with the new one.
  ///@param matrix the transformation matrix
  ///@throws IOException If there is an error writing to the stream.
  ///@deprecated Use \#setTextMatrix(Matrix) instead.
  void setTextMatrix1(
    jni.JObject matrix,
  ) {
    return _setTextMatrix1(reference, matrix.reference).check();
  }

  static final _setTextMatrix2 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__setTextMatrix2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setTextMatrix(org.apache.pdfbox.util.Matrix matrix)
  ///
  /// The Tm operator. Sets the text matrix to the given values.
  /// A current text matrix will be replaced with the new one.
  ///@param matrix the transformation matrix
  ///@throws IOException If there is an error writing to the stream.
  ///@throws IllegalStateException If the method was not allowed to be called at this time.
  void setTextMatrix2(
    jni.JObject matrix,
  ) {
    return _setTextMatrix2(reference, matrix.reference).check();
  }

  static final _setTextScaling = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Double,
                  ffi.Double,
                  ffi.Double,
                  ffi.Double)>>("PDPageContentStream__setTextScaling")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, double, double, double, double)>();

  /// from: public void setTextScaling(double sx, double sy, double tx, double ty)
  ///
  /// The Tm operator. Sets the text matrix to the given scaling and translation values.
  /// A current text matrix will be replaced with the new one.
  ///@param sx The scaling factor in x-direction.
  ///@param sy The scaling factor in y-direction.
  ///@param tx The translation value in x-direction.
  ///@param ty The translation value in y-direction.
  ///@throws IOException If there is an error writing to the stream.
  ///@deprecated Use \#setTextMatrix(Matrix) instead.
  void setTextScaling(
    double sx,
    double sy,
    double tx,
    double ty,
  ) {
    return _setTextScaling(reference, sx, sy, tx, ty).check();
  }

  static final _setTextTranslation = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Double,
                  ffi.Double)>>("PDPageContentStream__setTextTranslation")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, double, double)>();

  /// from: public void setTextTranslation(double tx, double ty)
  ///
  /// The Tm operator. Sets the text matrix to the given translation values.
  /// A current text matrix will be replaced with the new one.
  ///@param tx The translation value in x-direction.
  ///@param ty The translation value in y-direction.
  ///@throws IOException If there is an error writing to the stream.
  ///@deprecated Use \#setTextMatrix(Matrix) instead.
  void setTextTranslation(
    double tx,
    double ty,
  ) {
    return _setTextTranslation(reference, tx, ty).check();
  }

  static final _setTextRotation = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Double,
                  ffi.Double,
                  ffi.Double)>>("PDPageContentStream__setTextRotation")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, double, double, double)>();

  /// from: public void setTextRotation(double angle, double tx, double ty)
  ///
  /// The Tm operator. Sets the text matrix to the given rotation and translation values.
  /// A current text matrix will be replaced with the new one.
  ///@param angle The angle used for the counterclockwise rotation in radians.
  ///@param tx The translation value in x-direction.
  ///@param ty The translation value in y-direction.
  ///@throws IOException If there is an error writing to the stream.
  ///@deprecated Use \#setTextMatrix(Matrix) instead.
  void setTextRotation(
    double angle,
    double tx,
    double ty,
  ) {
    return _setTextRotation(reference, angle, tx, ty).check();
  }

  static final _drawImage = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Float,
                  ffi.Float)>>("PDPageContentStream__drawImage")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, double, double)>();

  /// from: public void drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject image, float x, float y)
  ///
  /// Draw an image at the x,y coordinates, with the default size of the image.
  ///@param image The image to draw.
  ///@param x The x-coordinate to draw the image.
  ///@param y The y-coordinate to draw the image.
  ///@throws IOException If there is an error writing to the stream.
  void drawImage(
    pdimagexobject_.PDImageXObject image,
    double x,
    double y,
  ) {
    return _drawImage(reference, image.reference, x, y).check();
  }

  static final _drawImage1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float)>>("PDPageContentStream__drawImage1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              double, double, double, double)>();

  /// from: public void drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject image, float x, float y, float width, float height)
  ///
  /// Draw an image at the x,y coordinates, with the given size.
  ///@param image The image to draw.
  ///@param x The x-coordinate to draw the image.
  ///@param y The y-coordinate to draw the image.
  ///@param width The width to draw the image.
  ///@param height The height to draw the image.
  ///@throws IOException If there is an error writing to the stream.
  ///@throws IllegalStateException If the method was called within a text block.
  void drawImage1(
    pdimagexobject_.PDImageXObject image,
    double x,
    double y,
    double width,
    double height,
  ) {
    return _drawImage1(reference, image.reference, x, y, width, height).check();
  }

  static final _drawImage2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDPageContentStream__drawImage2")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject image, org.apache.pdfbox.util.Matrix matrix)
  ///
  /// Draw an image at the origin with the given transformation matrix.
  ///@param image The image to draw.
  ///@param matrix The transformation matrix to apply to the image.
  ///@throws IOException If there is an error writing to the stream.
  ///@throws IllegalStateException If the method was called within a text block.
  void drawImage2(
    pdimagexobject_.PDImageXObject image,
    jni.JObject matrix,
  ) {
    return _drawImage2(reference, image.reference, matrix.reference).check();
  }

  static final _drawInlineImage = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Float,
                  ffi.Float)>>("PDPageContentStream__drawInlineImage")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, double, double)>();

  /// from: public void drawInlineImage(org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage inlineImage, float x, float y)
  ///
  /// Draw an inline image at the x,y coordinates, with the default size of the image.
  ///@param inlineImage The inline image to draw.
  ///@param x The x-coordinate to draw the inline image.
  ///@param y The y-coordinate to draw the inline image.
  ///@throws IOException If there is an error writing to the stream.
  ///@deprecated Use \#drawImage(PDInlineImage, float, float) instead.
  void drawInlineImage(
    jni.JObject inlineImage,
    double x,
    double y,
  ) {
    return _drawInlineImage(reference, inlineImage.reference, x, y).check();
  }

  static final _drawImage3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Float,
                  ffi.Float)>>("PDPageContentStream__drawImage3")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, double, double)>();

  /// from: public void drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage inlineImage, float x, float y)
  ///
  /// Draw an inline image at the x,y coordinates, with the default size of the image.
  ///@param inlineImage The inline image to draw.
  ///@param x The x-coordinate to draw the inline image.
  ///@param y The y-coordinate to draw the inline image.
  ///@throws IOException If there is an error writing to the stream.
  void drawImage3(
    jni.JObject inlineImage,
    double x,
    double y,
  ) {
    return _drawImage3(reference, inlineImage.reference, x, y).check();
  }

  static final _drawInlineImage1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float)>>("PDPageContentStream__drawInlineImage1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              double, double, double, double)>();

  /// from: public void drawInlineImage(org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage inlineImage, float x, float y, float width, float height)
  ///
  /// Draw an inline image at the x,y coordinates and a certain width and height.
  ///@param inlineImage The inline image to draw.
  ///@param x The x-coordinate to draw the inline image.
  ///@param y The y-coordinate to draw the inline image.
  ///@param width The width of the inline image to draw.
  ///@param height The height of the inline image to draw.
  ///@throws IOException If there is an error writing to the stream.
  ///@deprecated Use \#drawImage(PDInlineImage, float, float, float, float) instead.
  void drawInlineImage1(
    jni.JObject inlineImage,
    double x,
    double y,
    double width,
    double height,
  ) {
    return _drawInlineImage1(
            reference, inlineImage.reference, x, y, width, height)
        .check();
  }

  static final _drawImage4 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float)>>("PDPageContentStream__drawImage4")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              double, double, double, double)>();

  /// from: public void drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage inlineImage, float x, float y, float width, float height)
  ///
  /// Draw an inline image at the x,y coordinates and a certain width and height.
  ///@param inlineImage The inline image to draw.
  ///@param x The x-coordinate to draw the inline image.
  ///@param y The y-coordinate to draw the inline image.
  ///@param width The width of the inline image to draw.
  ///@param height The height of the inline image to draw.
  ///@throws IOException If there is an error writing to the stream.
  ///@throws IllegalStateException If the method was called within a text block.
  void drawImage4(
    jni.JObject inlineImage,
    double x,
    double y,
    double width,
    double height,
  ) {
    return _drawImage4(reference, inlineImage.reference, x, y, width, height)
        .check();
  }

  static final _drawXObject = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float)>>("PDPageContentStream__drawXObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              double, double, double, double)>();

  /// from: public void drawXObject(org.apache.pdfbox.pdmodel.graphics.PDXObject xobject, float x, float y, float width, float height)
  ///
  /// Draw an xobject(form or image) at the x,y coordinates and a certain width and height.
  ///@param xobject The xobject to draw.
  ///@param x The x-coordinate to draw the image.
  ///@param y The y-coordinate to draw the image.
  ///@param width The width of the image to draw.
  ///@param height The height of the image to draw.
  ///@throws IOException If there is an error writing to the stream.
  ///@deprecated Use \#drawImage instead.
  void drawXObject(
    jni.JObject xobject,
    double x,
    double y,
    double width,
    double height,
  ) {
    return _drawXObject(reference, xobject.reference, x, y, width, height)
        .check();
  }

  static final _drawXObject1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDPageContentStream__drawXObject1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void drawXObject(org.apache.pdfbox.pdmodel.graphics.PDXObject xobject, java.awt.geom.AffineTransform transform)
  ///
  /// Draw an xobject(form or image) using the given AffineTransform to position
  /// the xobject.
  ///@param xobject The xobject to draw.
  ///@param transform the transformation matrix
  ///@throws IOException If there is an error writing to the stream.
  ///@throws IllegalStateException If the method was called within a text block.
  ///@deprecated Use \#drawImage(PDImageXObject, Matrix) drawImage(PDImageXObject, Matrix)
  /// or \#drawForm(PDFormXObject) drawForm(PDFormXObject) with
  /// \#transform(Matrix) transform(Matrix) instead.
  void drawXObject1(
    jni.JObject xobject,
    jni.JObject transform,
  ) {
    return _drawXObject1(reference, xobject.reference, transform.reference)
        .check();
  }

  static final _drawForm = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDPageContentStream__drawForm")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void drawForm(org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject form)
  ///
  /// Draws the given Form XObject at the current location.
  ///@param form Form XObject
  ///@throws IOException if the content stream could not be written
  ///@throws IllegalStateException If the method was called within a text block.
  void drawForm(
    jni.JObject form,
  ) {
    return _drawForm(reference, form.reference).check();
  }

  static final _concatenate2CTM = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Double,
                  ffi.Double,
                  ffi.Double,
                  ffi.Double,
                  ffi.Double,
                  ffi.Double)>>("PDPageContentStream__concatenate2CTM")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, double, double, double,
              double, double, double)>();

  /// from: public void concatenate2CTM(double a, double b, double c, double d, double e, double f)
  ///
  /// The cm operator. Concatenates the current transformation matrix with the given values.
  ///@param a The a value of the matrix.
  ///@param b The b value of the matrix.
  ///@param c The c value of the matrix.
  ///@param d The d value of the matrix.
  ///@param e The e value of the matrix.
  ///@param f The f value of the matrix.
  ///@throws IOException If there is an error writing to the stream.
  ///@deprecated Use \#transform instead.
  void concatenate2CTM(
    double a,
    double b,
    double c,
    double d,
    double e,
    double f,
  ) {
    return _concatenate2CTM(reference, a, b, c, d, e, f).check();
  }

  static final _concatenate2CTM1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__concatenate2CTM1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void concatenate2CTM(java.awt.geom.AffineTransform at)
  ///
  /// The cm operator. Concatenates the current transformation matrix with the given
  /// AffineTransform.
  ///@param at the transformation matrix
  ///@throws IOException If there is an error writing to the stream.
  ///@deprecated Use \#transform instead.
  void concatenate2CTM1(
    jni.JObject at,
  ) {
    return _concatenate2CTM1(reference, at.reference).check();
  }

  static final _transform = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDPageContentStream__transform")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void transform(org.apache.pdfbox.util.Matrix matrix)
  ///
  /// The cm operator. Concatenates the given matrix with the current transformation matrix (CTM),
  /// which maps user space coordinates used within a PDF content stream into output device
  /// coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2
  /// Coordinate Spaces.
  ///@param matrix the transformation matrix
  ///@throws IOException If there is an error writing to the stream.
  void transform(
    jni.JObject matrix,
  ) {
    return _transform(reference, matrix.reference).check();
  }

  static final _saveGraphicsState = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__saveGraphicsState")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void saveGraphicsState()
  ///
  /// q operator. Saves the current graphics state.
  ///@throws IOException If an error occurs while writing to the stream.
  void saveGraphicsState() {
    return _saveGraphicsState(reference).check();
  }

  static final _restoreGraphicsState = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__restoreGraphicsState")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void restoreGraphicsState()
  ///
  /// Q operator. Restores the current graphics state.
  ///@throws IOException If an error occurs while writing to the stream.
  void restoreGraphicsState() {
    return _restoreGraphicsState(reference).check();
  }

  static final _setStrokingColorSpace = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__setStrokingColorSpace")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setStrokingColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace colorSpace)
  ///
  /// Set the stroking color space.  This will add the colorspace to the PDResources
  /// if necessary.
  ///@param colorSpace The colorspace to write.
  ///@throws IOException If there is an error writing the colorspace.
  ///@deprecated Use \#setStrokingColor instead.
  void setStrokingColorSpace(
    jni.JObject colorSpace,
  ) {
    return _setStrokingColorSpace(reference, colorSpace.reference).check();
  }

  static final _setNonStrokingColorSpace = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__setNonStrokingColorSpace")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setNonStrokingColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace colorSpace)
  ///
  /// Set the stroking color space.  This will add the colorspace to the PDResources
  /// if necessary.
  ///@param colorSpace The colorspace to write.
  ///@throws IOException If there is an error writing the colorspace.
  ///@deprecated Use \#setNonStrokingColor(PDColor) instead.
  void setNonStrokingColorSpace(
    jni.JObject colorSpace,
  ) {
    return _setNonStrokingColorSpace(reference, colorSpace.reference).check();
  }

  static final _setStrokingColor = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__setStrokingColor")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setStrokingColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor color)
  ///
  /// Sets the stroking color and, if necessary, the stroking color space.
  ///@param color Color in a specific color space.
  ///@throws IOException If an IO error occurs while writing to the stream.
  void setStrokingColor(
    jni.JObject color,
  ) {
    return _setStrokingColor(reference, color.reference).check();
  }

  static final _setStrokingColor1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__setStrokingColor1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setStrokingColor(java.awt.Color color)
  ///
  /// Set the stroking color using an AWT color. Conversion uses the default sRGB color space.
  ///@param color The color to set.
  ///@throws IOException If an IO error occurs while writing to the stream.
  void setStrokingColor1(
    jni.JObject color,
  ) {
    return _setStrokingColor1(reference, color.reference).check();
  }

  static final _setStrokingColor2 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__setStrokingColor2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setStrokingColor(float[] components)
  ///
  /// Set the color components of current stroking color space.
  ///@param components The components to set for the current color.
  ///@throws IOException If there is an error while writing to the stream.
  ///@deprecated Use \#setStrokingColor(PDColor) instead.
  void setStrokingColor2(
    jni.JArray<jni.jfloat> components,
  ) {
    return _setStrokingColor2(reference, components.reference).check();
  }

  static final _setStrokingColor3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float)>>("PDPageContentStream__setStrokingColor3")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, double, double, double)>();

  /// from: public void setStrokingColor(float r, float g, float b)
  ///
  /// Set the stroking color in the DeviceRGB color space. Range is 0..1.
  ///@param r The red value
  ///@param g The green value.
  ///@param b The blue value.
  ///@throws IOException If an IO error occurs while writing to the stream.
  ///@throws IllegalArgumentException If the parameters are invalid.
  void setStrokingColor3(
    double r,
    double g,
    double b,
  ) {
    return _setStrokingColor3(reference, r, g, b).check();
  }

  static final _setStrokingColor4 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32)>>("PDPageContentStream__setStrokingColor4")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public void setStrokingColor(int r, int g, int b)
  ///
  /// Set the stroking color in the DeviceRGB color space. Range is 0..255.
  ///@param r The red value
  ///@param g The green value.
  ///@param b The blue value.
  ///@throws IOException If an IO error occurs while writing to the stream.
  ///@throws IllegalArgumentException If the parameters are invalid.
  ///@deprecated use
  /// \#setStrokingColor(float, float, float) setStrokingColor(r/255f, g/255f, b/255f)
  void setStrokingColor4(
    int r,
    int g,
    int b,
  ) {
    return _setStrokingColor4(reference, r, g, b).check();
  }

  static final _setStrokingColor5 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32)>>("PDPageContentStream__setStrokingColor5")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int, int, int)>();

  /// from: public void setStrokingColor(int c, int m, int y, int k)
  ///
  /// Set the stroking color in the DeviceCMYK color space. Range is 0..255.
  ///@param c The cyan value.
  ///@param m The magenta value.
  ///@param y The yellow value.
  ///@param k The black value.
  ///@throws IOException If an IO error occurs while writing to the stream.
  ///@throws IllegalArgumentException If the parameters are invalid.
  ///@deprecated Use \#setStrokingColor(float, float, float, float) setStrokingColor(c/255f, m/255f, y/255f, k/255f) instead.
  void setStrokingColor5(
    int c,
    int m,
    int y,
    int k,
  ) {
    return _setStrokingColor5(reference, c, m, y, k).check();
  }

  static final _setStrokingColor6 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float)>>("PDPageContentStream__setStrokingColor6")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, double, double, double, double)>();

  /// from: public void setStrokingColor(float c, float m, float y, float k)
  ///
  /// Set the stroking color in the DeviceCMYK color space. Range is 0..1
  ///@param c The cyan value.
  ///@param m The magenta value.
  ///@param y The yellow value.
  ///@param k The black value.
  ///@throws IOException If an IO error occurs while writing to the stream.
  ///@throws IllegalArgumentException If the parameters are invalid.
  void setStrokingColor6(
    double c,
    double m,
    double y,
    double k,
  ) {
    return _setStrokingColor6(reference, c, m, y, k).check();
  }

  static final _setStrokingColor7 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("PDPageContentStream__setStrokingColor7")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setStrokingColor(int g)
  ///
  /// Set the stroking color in the DeviceGray color space. Range is 0..255.
  ///@param g The gray value.
  ///@throws IOException If an IO error occurs while writing to the stream.
  ///@throws IllegalArgumentException If the parameter is invalid.
  ///@deprecated Use \#setStrokingColor(float) setStrokingColor(g/255f) instead.
  void setStrokingColor7(
    int g,
  ) {
    return _setStrokingColor7(reference, g).check();
  }

  static final _setStrokingColor8 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Double)>>("PDPageContentStream__setStrokingColor8")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, double)>();

  /// from: public void setStrokingColor(double g)
  ///
  /// Set the stroking color in the DeviceGray color space. Range is 0..1.
  ///@param g The gray value.
  ///@throws IOException If an IO error occurs while writing to the stream.
  ///@throws IllegalArgumentException If the parameter is invalid.
  ///@deprecated use \#setStrokingColor(float) setStrokingColor(float)
  void setStrokingColor8(
    double g,
  ) {
    return _setStrokingColor8(reference, g).check();
  }

  static final _setStrokingColor9 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Float)>>("PDPageContentStream__setStrokingColor9")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, double)>();

  /// from: public void setStrokingColor(float g)
  ///
  /// Set the stroking color in the DeviceGray color space. Range is 0..1.
  ///@param g The gray value.
  ///@throws IOException If an IO error occurs while writing to the stream.
  ///@throws IllegalArgumentException If the parameter is invalid.
  void setStrokingColor9(
    double g,
  ) {
    return _setStrokingColor9(reference, g).check();
  }

  static final _setNonStrokingColor = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__setNonStrokingColor")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setNonStrokingColor(org.apache.pdfbox.pdmodel.graphics.color.PDColor color)
  ///
  /// Sets the non-stroking color and, if necessary, the non-stroking color space.
  ///@param color Color in a specific color space.
  ///@throws IOException If an IO error occurs while writing to the stream.
  void setNonStrokingColor(
    jni.JObject color,
  ) {
    return _setNonStrokingColor(reference, color.reference).check();
  }

  static final _setNonStrokingColor1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__setNonStrokingColor1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setNonStrokingColor(java.awt.Color color)
  ///
  /// Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space.
  ///@param color The color to set.
  ///@throws IOException If an IO error occurs while writing to the stream.
  void setNonStrokingColor1(
    jni.JObject color,
  ) {
    return _setNonStrokingColor1(reference, color.reference).check();
  }

  static final _setNonStrokingColor2 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__setNonStrokingColor2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setNonStrokingColor(float[] components)
  ///
  /// Set the color components of current non-stroking color space.
  ///@param components The components to set for the current color.
  ///@throws IOException If there is an error while writing to the stream.
  ///@deprecated Use \#setNonStrokingColor(PDColor) instead.
  void setNonStrokingColor2(
    jni.JArray<jni.jfloat> components,
  ) {
    return _setNonStrokingColor2(reference, components.reference).check();
  }

  static final _setNonStrokingColor3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float)>>("PDPageContentStream__setNonStrokingColor3")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, double, double, double)>();

  /// from: public void setNonStrokingColor(float r, float g, float b)
  ///
  /// Set the non-stroking color in the DeviceRGB color space. Range is 0..1.
  ///@param r The red value.
  ///@param g The green value.
  ///@param b The blue value.
  ///@throws IOException If an IO error occurs while writing to the stream.
  ///@throws IllegalArgumentException If the parameters are invalid.
  void setNonStrokingColor3(
    double r,
    double g,
    double b,
  ) {
    return _setNonStrokingColor3(reference, r, g, b).check();
  }

  static final _setNonStrokingColor4 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32)>>("PDPageContentStream__setNonStrokingColor4")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public void setNonStrokingColor(int r, int g, int b)
  ///
  /// Set the non stroking color in the DeviceRGB color space. Range is 0..255.
  ///@param r The red value
  ///@param g The green value.
  ///@param b The blue value.
  ///@throws IOException If an IO error occurs while writing to the stream.
  ///@throws IllegalArgumentException If the parameters are invalid.
  ///@deprecated use
  /// \#setNonStrokingColor(float, float, float) setNonStrokingColor(r/255f, g/255f, b/255f)
  void setNonStrokingColor4(
    int r,
    int g,
    int b,
  ) {
    return _setNonStrokingColor4(reference, r, g, b).check();
  }

  static final _setNonStrokingColor5 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32)>>("PDPageContentStream__setNonStrokingColor5")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int, int, int)>();

  /// from: public void setNonStrokingColor(int c, int m, int y, int k)
  ///
  /// Set the non-stroking color in the DeviceCMYK color space. Range is 0..255.
  ///@param c The cyan value.
  ///@param m The magenta value.
  ///@param y The yellow value.
  ///@param k The black value.
  ///@throws IOException If an IO error occurs while writing to the stream.
  ///@throws IllegalArgumentException If the parameters are invalid.
  void setNonStrokingColor5(
    int c,
    int m,
    int y,
    int k,
  ) {
    return _setNonStrokingColor5(reference, c, m, y, k).check();
  }

  static final _setNonStrokingColor6 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Double,
                  ffi.Double,
                  ffi.Double,
                  ffi.Double)>>("PDPageContentStream__setNonStrokingColor6")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, double, double, double, double)>();

  /// from: public void setNonStrokingColor(double c, double m, double y, double k)
  ///
  /// Set the non-stroking color in the DeviceCMYK color space. Range is 0..1.
  ///@param c The cyan value.
  ///@param m The magenta value.
  ///@param y The yellow value.
  ///@param k The black value.
  ///@throws IOException If an IO error occurs while writing to the stream.
  ///@deprecated use
  /// \#setNonStrokingColor(float, float, float, float) setNonStrokingColor(float, float, float, float)
  void setNonStrokingColor6(
    double c,
    double m,
    double y,
    double k,
  ) {
    return _setNonStrokingColor6(reference, c, m, y, k).check();
  }

  static final _setNonStrokingColor7 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float)>>("PDPageContentStream__setNonStrokingColor7")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, double, double, double, double)>();

  /// from: public void setNonStrokingColor(float c, float m, float y, float k)
  ///
  /// Set the non-stroking color in the DeviceCMYK color space. Range is 0..1.
  ///@param c The cyan value.
  ///@param m The magenta value.
  ///@param y The yellow value.
  ///@param k The black value.
  ///@throws IOException If an IO error occurs while writing to the stream.
  void setNonStrokingColor7(
    double c,
    double m,
    double y,
    double k,
  ) {
    return _setNonStrokingColor7(reference, c, m, y, k).check();
  }

  static final _setNonStrokingColor8 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("PDPageContentStream__setNonStrokingColor8")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setNonStrokingColor(int g)
  ///
  /// Set the non-stroking color in the DeviceGray color space. Range is 0..255.
  ///@param g The gray value.
  ///@throws IOException If an IO error occurs while writing to the stream.
  ///@throws IllegalArgumentException If the parameter is invalid.
  ///@deprecated use \#setNonStrokingColor(float) setNonStrokingColor(g/255f)
  void setNonStrokingColor8(
    int g,
  ) {
    return _setNonStrokingColor8(reference, g).check();
  }

  static final _setNonStrokingColor9 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Double)>>("PDPageContentStream__setNonStrokingColor9")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, double)>();

  /// from: public void setNonStrokingColor(double g)
  ///
  /// Set the non-stroking color in the DeviceGray color space. Range is 0..1.
  ///@param g The gray value.
  ///@throws IOException If an IO error occurs while writing to the stream.
  ///@throws IllegalArgumentException If the parameter is invalid.
  ///@deprecated use \#setNonStrokingColor(float) setNonStrokingColor(float)
  void setNonStrokingColor9(
    double g,
  ) {
    return _setNonStrokingColor9(reference, g).check();
  }

  static final _setNonStrokingColor10 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Float)>>("PDPageContentStream__setNonStrokingColor10")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, double)>();

  /// from: public void setNonStrokingColor(float g)
  ///
  /// Set the non-stroking color in the DeviceGray color space. Range is 0..1.
  ///@param g The gray value.
  ///@throws IOException If an IO error occurs while writing to the stream.
  ///@throws IllegalArgumentException If the parameter is invalid.
  void setNonStrokingColor10(
    double g,
  ) {
    return _setNonStrokingColor10(reference, g).check();
  }

  static final _addRect = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float)>>("PDPageContentStream__addRect")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, double, double, double, double)>();

  /// from: public void addRect(float x, float y, float width, float height)
  ///
  /// Add a rectangle to the current path.
  ///@param x The lower left x coordinate.
  ///@param y The lower left y coordinate.
  ///@param width The width of the rectangle.
  ///@param height The height of the rectangle.
  ///@throws IOException If the content stream could not be written.
  ///@throws IllegalStateException If the method was called within a text block.
  void addRect(
    double x,
    double y,
    double width,
    double height,
  ) {
    return _addRect(reference, x, y, width, height).check();
  }

  static final _fillRect = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float)>>("PDPageContentStream__fillRect")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, double, double, double, double)>();

  /// from: public void fillRect(float x, float y, float width, float height)
  ///
  /// Fill a rectangle on the page using the current non stroking color.
  ///@param x The lower left x coordinate.
  ///@param y The lower left y coordinate.
  ///@param width The width of the rectangle.
  ///@param height The height of the rectangle.
  ///@throws IOException If there is an error while drawing on the screen.
  ///@throws IllegalStateException If the method was called within a text block.
  ///@deprecated Use \#addRect followed by \#fill() instead.
  void fillRect(
    double x,
    double y,
    double width,
    double height,
  ) {
    return _fillRect(reference, x, y, width, height).check();
  }

  static final _addBezier312 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float)>>("PDPageContentStream__addBezier312")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, double, double, double,
              double, double, double)>();

  /// from: public void addBezier312(float x1, float y1, float x2, float y2, float x3, float y3)
  ///
  /// Append a cubic BÃ©zier curve to the current path. The curve extends from the current
  /// point to the point (x3 , y3 ), using (x1 , y1 ) and (x2 , y2 ) as the BÃ©zier control points
  ///@param x1 x coordinate of the point 1
  ///@param y1 y coordinate of the point 1
  ///@param x2 x coordinate of the point 2
  ///@param y2 y coordinate of the point 2
  ///@param x3 x coordinate of the point 3
  ///@param y3 y coordinate of the point 3
  ///@throws IOException If there is an error while adding the .
  ///@deprecated Use \#curveTo instead.
  void addBezier312(
    double x1,
    double y1,
    double x2,
    double y2,
    double x3,
    double y3,
  ) {
    return _addBezier312(reference, x1, y1, x2, y2, x3, y3).check();
  }

  static final _curveTo = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float)>>("PDPageContentStream__curveTo")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, double, double, double,
              double, double, double)>();

  /// from: public void curveTo(float x1, float y1, float x2, float y2, float x3, float y3)
  ///
  /// Append a cubic BÃ©zier curve to the current path. The curve extends from the current point to
  /// the point (x3, y3), using (x1, y1) and (x2, y2) as the BÃ©zier control points.
  ///@param x1 x coordinate of the point 1
  ///@param y1 y coordinate of the point 1
  ///@param x2 x coordinate of the point 2
  ///@param y2 y coordinate of the point 2
  ///@param x3 x coordinate of the point 3
  ///@param y3 y coordinate of the point 3
  ///@throws IOException If the content stream could not be written.
  ///@throws IllegalStateException If the method was called within a text block.
  void curveTo(
    double x1,
    double y1,
    double x2,
    double y2,
    double x3,
    double y3,
  ) {
    return _curveTo(reference, x1, y1, x2, y2, x3, y3).check();
  }

  static final _addBezier32 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float)>>("PDPageContentStream__addBezier32")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, double, double, double, double)>();

  /// from: public void addBezier32(float x2, float y2, float x3, float y3)
  ///
  /// Append a cubic BÃ©zier curve to the current path. The curve extends from the current
  /// point to the point (x3 , y3 ), using the current point and (x2 , y2 ) as the BÃ©zier control points/
  ///@param x2 x coordinate of the point 2
  ///@param y2 y coordinate of the point 2
  ///@param x3 x coordinate of the point 3
  ///@param y3 y coordinate of the point 3
  ///@throws IOException If there is an error while adding the .
  ///@deprecated Use \#curveTo2 instead.
  void addBezier32(
    double x2,
    double y2,
    double x3,
    double y3,
  ) {
    return _addBezier32(reference, x2, y2, x3, y3).check();
  }

  static final _curveTo2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float)>>("PDPageContentStream__curveTo2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, double, double, double, double)>();

  /// from: public void curveTo2(float x2, float y2, float x3, float y3)
  ///
  /// Append a cubic BÃ©zier curve to the current path. The curve extends from the current point to
  /// the point (x3, y3), using the current point and (x2, y2) as the BÃ©zier control points.
  ///@param x2 x coordinate of the point 2
  ///@param y2 y coordinate of the point 2
  ///@param x3 x coordinate of the point 3
  ///@param y3 y coordinate of the point 3
  ///@throws IllegalStateException If the method was called within a text block.
  ///@throws IOException If the content stream could not be written.
  void curveTo2(
    double x2,
    double y2,
    double x3,
    double y3,
  ) {
    return _curveTo2(reference, x2, y2, x3, y3).check();
  }

  static final _addBezier31 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float)>>("PDPageContentStream__addBezier31")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, double, double, double, double)>();

  /// from: public void addBezier31(float x1, float y1, float x3, float y3)
  ///
  /// Append a cubic BÃ©zier curve to the current path. The curve extends from the current
  /// point to the point (x3 , y3 ), using (x1 , y1 ) and (x3 , y3 ) as the BÃ©zier control points/
  ///@param x1 x coordinate of the point 1
  ///@param y1 y coordinate of the point 1
  ///@param x3 x coordinate of the point 3
  ///@param y3 y coordinate of the point 3
  ///@throws IOException If there is an error while adding the .
  ///@deprecated Use \#curveTo1 instead.
  void addBezier31(
    double x1,
    double y1,
    double x3,
    double y3,
  ) {
    return _addBezier31(reference, x1, y1, x3, y3).check();
  }

  static final _curveTo1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float)>>("PDPageContentStream__curveTo1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, double, double, double, double)>();

  /// from: public void curveTo1(float x1, float y1, float x3, float y3)
  ///
  /// Append a cubic BÃ©zier curve to the current path. The curve extends from the current point to
  /// the point (x3, y3), using (x1, y1) and (x3, y3) as the BÃ©zier control points.
  ///@param x1 x coordinate of the point 1
  ///@param y1 y coordinate of the point 1
  ///@param x3 x coordinate of the point 3
  ///@param y3 y coordinate of the point 3
  ///@throws IOException If the content stream could not be written.
  ///@throws IllegalStateException If the method was called within a text block.
  void curveTo1(
    double x1,
    double y1,
    double x3,
    double y3,
  ) {
    return _curveTo1(reference, x1, y1, x3, y3).check();
  }

  static final _moveTo = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Float,
                  ffi.Float)>>("PDPageContentStream__moveTo")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, double, double)>();

  /// from: public void moveTo(float x, float y)
  ///
  /// Move the current position to the given coordinates.
  ///@param x The x coordinate.
  ///@param y The y coordinate.
  ///@throws IOException If the content stream could not be written.
  ///@throws IllegalStateException If the method was called within a text block.
  void moveTo(
    double x,
    double y,
  ) {
    return _moveTo(reference, x, y).check();
  }

  static final _lineTo = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Float,
                  ffi.Float)>>("PDPageContentStream__lineTo")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, double, double)>();

  /// from: public void lineTo(float x, float y)
  ///
  /// Draw a line from the current position to the given coordinates.
  ///@param x The x coordinate.
  ///@param y The y coordinate.
  ///@throws IOException If the content stream could not be written.
  ///@throws IllegalStateException If the method was called within a text block.
  void lineTo(
    double x,
    double y,
  ) {
    return _lineTo(reference, x, y).check();
  }

  static final _addLine = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float)>>("PDPageContentStream__addLine")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, double, double, double, double)>();

  /// from: public void addLine(float xStart, float yStart, float xEnd, float yEnd)
  ///
  /// add a line to the current path.
  ///@param xStart The start x coordinate.
  ///@param yStart The start y coordinate.
  ///@param xEnd The end x coordinate.
  ///@param yEnd The end y coordinate.
  ///@throws IOException If there is an error while adding the line.
  ///@throws IllegalStateException If the method was called within a text block.
  ///@deprecated Use \#moveTo moveto(xStart,yStart) followed by
  /// \#lineTo lineTo(xEnd,yEnd).
  void addLine(
    double xStart,
    double yStart,
    double xEnd,
    double yEnd,
  ) {
    return _addLine(reference, xStart, yStart, xEnd, yEnd).check();
  }

  static final _drawLine = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float,
                  ffi.Float)>>("PDPageContentStream__drawLine")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, double, double, double, double)>();

  /// from: public void drawLine(float xStart, float yStart, float xEnd, float yEnd)
  ///
  /// Draw a line on the page using the current stroking color and the current line width.
  ///@param xStart The start x coordinate.
  ///@param yStart The start y coordinate.
  ///@param xEnd The end x coordinate.
  ///@param yEnd The end y coordinate.
  ///@throws IOException If there is an error while drawing on the screen.
  ///@throws IllegalStateException If the method was called within a text block.
  ///@deprecated Use \#moveTo moveto(xStart,yStart) followed by
  /// \#lineTo lineTo(xEnd,yEnd) followed by \#stroke stroke().
  void drawLine(
    double xStart,
    double yStart,
    double xEnd,
    double yEnd,
  ) {
    return _drawLine(reference, xStart, yStart, xEnd, yEnd).check();
  }

  static final _addPolygon = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDPageContentStream__addPolygon")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void addPolygon(float[] x, float[] y)
  ///
  /// Add a polygon to the current path.
  ///@param x x coordinate of each points
  ///@param y y coordinate of each points
  ///@throws IOException If there is an error while drawing on the screen.
  ///@throws IllegalStateException If the method was called within a text block.
  ///@throws IllegalArgumentException If the two arrays have different lengths.
  ///@deprecated Use \#moveTo and \#lineTo methods instead.
  void addPolygon(
    jni.JArray<jni.jfloat> x,
    jni.JArray<jni.jfloat> y,
  ) {
    return _addPolygon(reference, x.reference, y.reference).check();
  }

  static final _drawPolygon = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDPageContentStream__drawPolygon")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void drawPolygon(float[] x, float[] y)
  ///
  /// Draw a polygon on the page using the current stroking color.
  ///@param x x coordinate of each points
  ///@param y y coordinate of each points
  ///@throws IOException If there is an error while drawing on the screen.
  ///@throws IllegalStateException If the method was called within a text block.
  ///@deprecated Use \#moveTo and \#lineTo methods instead.
  void drawPolygon(
    jni.JArray<jni.jfloat> x,
    jni.JArray<jni.jfloat> y,
  ) {
    return _drawPolygon(reference, x.reference, y.reference).check();
  }

  static final _fillPolygon = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDPageContentStream__fillPolygon")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void fillPolygon(float[] x, float[] y)
  ///
  /// Draw and fill a polygon on the page using the current stroking / non stroking colors.
  ///@param x x coordinate of each points
  ///@param y y coordinate of each points
  ///@throws IOException If there is an error while drawing on the screen.
  ///@throws IllegalStateException If the method was called within a text block.
  ///@deprecated Use \#moveTo and \#lineTo methods instead.
  void fillPolygon(
    jni.JArray<jni.jfloat> x,
    jni.JArray<jni.jfloat> y,
  ) {
    return _fillPolygon(reference, x.reference, y.reference).check();
  }

  static final _stroke = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__stroke")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void stroke()
  ///
  /// Stroke the path.
  ///@throws IOException If the content stream could not be written
  ///@throws IllegalStateException If the method was called within a text block.
  void stroke() {
    return _stroke(reference).check();
  }

  static final _closeAndStroke = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__closeAndStroke")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void closeAndStroke()
  ///
  /// Close and stroke the path.
  ///@throws IOException If the content stream could not be written
  ///@throws IllegalStateException If the method was called within a text block.
  void closeAndStroke() {
    return _closeAndStroke(reference).check();
  }

  static final _fill = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("PDPageContentStream__fill")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void fill(int windingRule)
  ///
  /// Fill the path.
  ///@param windingRule the winding rule to be used for filling
  ///@throws IOException If the content stream could not be written
  ///@throws IllegalArgumentException If the parameter is not a valid winding rule.
  ///@deprecated Use \#fill() or \#fillEvenOdd instead.
  void fill(
    int windingRule,
  ) {
    return _fill(reference, windingRule).check();
  }

  static final _fill1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__fill1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void fill()
  ///
  /// Fills the path using the nonzero winding number rule.
  ///@throws IOException If the content stream could not be written
  ///@throws IllegalStateException If the method was called within a text block.
  void fill1() {
    return _fill1(reference).check();
  }

  static final _fillEvenOdd = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__fillEvenOdd")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void fillEvenOdd()
  ///
  /// Fills the path using the even-odd winding rule.
  ///@throws IOException If the content stream could not be written
  ///@throws IllegalStateException If the method was called within a text block.
  void fillEvenOdd() {
    return _fillEvenOdd(reference).check();
  }

  static final _fillAndStroke = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__fillAndStroke")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void fillAndStroke()
  ///
  /// Fill and then stroke the path, using the nonzero winding number rule to determine the region
  /// to fill. This shall produce the same result as constructing two identical path objects,
  /// painting the first with \#fill() and the second with \#stroke().
  ///@throws IOException If the content stream could not be written
  ///@throws IllegalStateException If the method was called within a text block.
  void fillAndStroke() {
    return _fillAndStroke(reference).check();
  }

  static final _fillAndStrokeEvenOdd = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__fillAndStrokeEvenOdd")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void fillAndStrokeEvenOdd()
  ///
  /// Fill and then stroke the path, using the even-odd rule to determine the region to
  /// fill. This shall produce the same result as constructing two identical path objects, painting
  /// the first with \#fillEvenOdd() and the second with \#stroke().
  ///@throws IOException If the content stream could not be written
  ///@throws IllegalStateException If the method was called within a text block.
  void fillAndStrokeEvenOdd() {
    return _fillAndStrokeEvenOdd(reference).check();
  }

  static final _closeAndFillAndStroke = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__closeAndFillAndStroke")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void closeAndFillAndStroke()
  ///
  /// Close, fill, and then stroke the path, using the nonzero winding number rule to determine the
  /// region to fill. This shall have the same effect as the sequence \#closePath()
  /// and then \#fillAndStroke().
  ///@throws IOException If the content stream could not be written
  ///@throws IllegalStateException If the method was called within a text block.
  void closeAndFillAndStroke() {
    return _closeAndFillAndStroke(reference).check();
  }

  static final _closeAndFillAndStrokeEvenOdd = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__closeAndFillAndStrokeEvenOdd")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void closeAndFillAndStrokeEvenOdd()
  ///
  /// Close, fill, and then stroke the path, using the even-odd rule to determine the region to
  /// fill. This shall have the same effect as the sequence \#closePath()
  /// and then \#fillAndStrokeEvenOdd().
  ///@throws IOException If the content stream could not be written
  ///@throws IllegalStateException If the method was called within a text block.
  void closeAndFillAndStrokeEvenOdd() {
    return _closeAndFillAndStrokeEvenOdd(reference).check();
  }

  static final _shadingFill = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDPageContentStream__shadingFill")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void shadingFill(org.apache.pdfbox.pdmodel.graphics.shading.PDShading shading)
  ///
  /// Fills the clipping area with the given shading.
  ///@param shading Shading resource
  ///@throws IOException If the content stream could not be written
  ///@throws IllegalStateException If the method was called within a text block.
  void shadingFill(
    jni.JObject shading,
  ) {
    return _shadingFill(reference, shading.reference).check();
  }

  static final _closeSubPath = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__closeSubPath")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void closeSubPath()
  ///
  /// Closes the current subpath.
  ///@throws IOException If the content stream could not be written
  ///@deprecated Use \#closePath() instead.
  void closeSubPath() {
    return _closeSubPath(reference).check();
  }

  static final _closePath = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__closePath")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void closePath()
  ///
  /// Closes the current subpath.
  ///@throws IOException If the content stream could not be written
  ///@throws IllegalStateException If the method was called within a text block.
  void closePath() {
    return _closePath(reference).check();
  }

  static final _clipPath = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("PDPageContentStream__clipPath")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void clipPath(int windingRule)
  ///
  /// Clip path.
  ///@param windingRule the winding rule to be used for clipping
  ///@throws IOException If there is an error while clipping the path.
  ///@throws IllegalStateException If the method was called within a text block.
  ///@deprecated Use \#clip() or \#clipEvenOdd instead.
  void clipPath(
    int windingRule,
  ) {
    return _clipPath(reference, windingRule).check();
  }

  static final _clip = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__clip")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void clip()
  ///
  /// Intersects the current clipping path with the current path, using the nonzero rule.
  ///@throws IOException If the content stream could not be written
  ///@throws IllegalStateException If the method was called within a text block.
  void clip() {
    return _clip(reference).check();
  }

  static final _clipEvenOdd = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__clipEvenOdd")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void clipEvenOdd()
  ///
  /// Intersects the current clipping path with the current path, using the even-odd rule.
  ///@throws IOException If the content stream could not be written
  ///@throws IllegalStateException If the method was called within a text block.
  void clipEvenOdd() {
    return _clipEvenOdd(reference).check();
  }

  static final _setLineWidth = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Float)>>("PDPageContentStream__setLineWidth")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, double)>();

  /// from: public void setLineWidth(float lineWidth)
  ///
  /// Set line width to the given value.
  ///@param lineWidth The width which is used for drawing.
  ///@throws IOException If the content stream could not be written
  void setLineWidth(
    double lineWidth,
  ) {
    return _setLineWidth(reference, lineWidth).check();
  }

  static final _setLineJoinStyle = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("PDPageContentStream__setLineJoinStyle")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setLineJoinStyle(int lineJoinStyle)
  ///
  /// Set the line join style.
  ///@param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join.
  ///@throws IOException If the content stream could not be written.
  ///@throws IllegalArgumentException If the parameter is not a valid line join style.
  void setLineJoinStyle(
    int lineJoinStyle,
  ) {
    return _setLineJoinStyle(reference, lineJoinStyle).check();
  }

  static final _setLineCapStyle = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("PDPageContentStream__setLineCapStyle")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setLineCapStyle(int lineCapStyle)
  ///
  /// Set the line cap style.
  ///@param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap.
  ///@throws IOException If the content stream could not be written.
  ///@throws IllegalArgumentException If the parameter is not a valid line cap style.
  void setLineCapStyle(
    int lineCapStyle,
  ) {
    return _setLineCapStyle(reference, lineCapStyle).check();
  }

  static final _setLineDashPattern = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Float)>>("PDPageContentStream__setLineDashPattern")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, double)>();

  /// from: public void setLineDashPattern(float[] pattern, float phase)
  ///
  /// Set the line dash pattern.
  ///@param pattern The pattern array
  ///@param phase The phase of the pattern
  ///@throws IOException If the content stream could not be written.
  void setLineDashPattern(
    jni.JArray<jni.jfloat> pattern,
    double phase,
  ) {
    return _setLineDashPattern(reference, pattern.reference, phase).check();
  }

  static final _setMiterLimit = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Float)>>("PDPageContentStream__setMiterLimit")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, double)>();

  /// from: public void setMiterLimit(float miterLimit)
  ///
  /// Set the miter limit.
  ///@param miterLimit the new miter limit.
  ///@throws IOException If the content stream could not be written.
  ///@throws IllegalArgumentException If the parameter is \u2264 0.
  void setMiterLimit(
    double miterLimit,
  ) {
    return _setMiterLimit(reference, miterLimit).check();
  }

  static final _beginMarkedContentSequence = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__beginMarkedContentSequence")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void beginMarkedContentSequence(org.apache.pdfbox.cos.COSName tag)
  ///
  /// Begin a marked content sequence.
  ///@param tag the tag
  ///@throws IOException if an I/O error occurs
  ///@deprecated Use \#beginMarkedContent instead.
  void beginMarkedContentSequence(
    jni.JObject tag,
  ) {
    return _beginMarkedContentSequence(reference, tag.reference).check();
  }

  static final _beginMarkedContent = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__beginMarkedContent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void beginMarkedContent(org.apache.pdfbox.cos.COSName tag)
  ///
  /// Begin a marked content sequence.
  ///@param tag the tag
  ///@throws IOException If the content stream could not be written
  void beginMarkedContent(
    jni.JObject tag,
  ) {
    return _beginMarkedContent(reference, tag.reference).check();
  }

  static final _beginMarkedContentSequence1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__beginMarkedContentSequence1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void beginMarkedContentSequence(org.apache.pdfbox.cos.COSName tag, org.apache.pdfbox.cos.COSName propsName)
  ///
  /// Begin a marked content sequence with a reference to an entry in the page resources'
  /// Properties dictionary.
  ///@param tag the tag
  ///@param propsName the properties reference
  ///@throws IOException if an I/O error occurs
  ///@deprecated Use \#beginMarkedContent(COSName, PDPropertyList) instead.
  void beginMarkedContentSequence1(
    jni.JObject tag,
    jni.JObject propsName,
  ) {
    return _beginMarkedContentSequence1(
            reference, tag.reference, propsName.reference)
        .check();
  }

  static final _beginMarkedContent1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__beginMarkedContent1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void beginMarkedContent(org.apache.pdfbox.cos.COSName tag, org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList propertyList)
  ///
  /// Begin a marked content sequence with a reference to an entry in the page resources'
  /// Properties dictionary.
  ///@param tag the tag
  ///@param propertyList property list
  ///@throws IOException If the content stream could not be written
  void beginMarkedContent1(
    jni.JObject tag,
    jni.JObject propertyList,
  ) {
    return _beginMarkedContent1(
            reference, tag.reference, propertyList.reference)
        .check();
  }

  static final _endMarkedContentSequence = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__endMarkedContentSequence")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void endMarkedContentSequence()
  ///
  /// End a marked content sequence.
  ///@throws IOException If the content stream could not be written
  ///@deprecated Use \#endMarkedContent instead.
  void endMarkedContentSequence() {
    return _endMarkedContentSequence(reference).check();
  }

  static final _endMarkedContent = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__endMarkedContent")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void endMarkedContent()
  ///
  /// End a marked content sequence.
  ///@throws IOException If the content stream could not be written
  void endMarkedContent() {
    return _endMarkedContent(reference).check();
  }

  static final _appendRawCommands = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__appendRawCommands")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void appendRawCommands(java.lang.String commands)
  ///
  /// This will append raw commands to the content stream.
  ///@param commands The commands to append to the stream.
  ///@throws IOException If an error occurs while writing to the stream.
  ///@deprecated Usage of this method is discouraged.
  void appendRawCommands(
    jni.JString commands,
  ) {
    return _appendRawCommands(reference, commands.reference).check();
  }

  static final _appendRawCommands1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__appendRawCommands1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void appendRawCommands(byte[] commands)
  ///
  /// This will append raw commands to the content stream.
  ///@param commands The commands to append to the stream.
  ///@throws IOException If an error occurs while writing to the stream.
  ///@deprecated Usage of this method is discouraged.
  void appendRawCommands1(
    jni.JArray<jni.jbyte> commands,
  ) {
    return _appendRawCommands1(reference, commands.reference).check();
  }

  static final _appendRawCommands2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("PDPageContentStream__appendRawCommands2")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void appendRawCommands(int data)
  ///
  /// This will append raw commands to the content stream.
  ///@param data Append a raw byte to the stream.
  ///@throws IOException If an error occurs while writing to the stream.
  ///@deprecated Usage of this method is discouraged.
  void appendRawCommands2(
    int data,
  ) {
    return _appendRawCommands2(reference, data).check();
  }

  static final _appendRawCommands3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Double)>>("PDPageContentStream__appendRawCommands3")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, double)>();

  /// from: public void appendRawCommands(double data)
  ///
  /// This will append raw commands to the content stream.
  ///@param data Append a formatted double value to the stream.
  ///@throws IOException If an error occurs while writing to the stream.
  ///@deprecated Usage of this method is discouraged.
  void appendRawCommands3(
    double data,
  ) {
    return _appendRawCommands3(reference, data).check();
  }

  static final _appendRawCommands4 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Float)>>("PDPageContentStream__appendRawCommands4")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, double)>();

  /// from: public void appendRawCommands(float data)
  ///
  /// This will append raw commands to the content stream.
  ///@param data Append a formatted float value to the stream.
  ///@throws IOException If an error occurs while writing to the stream.
  ///@deprecated Usage of this method is discouraged.
  void appendRawCommands4(
    double data,
  ) {
    return _appendRawCommands4(reference, data).check();
  }

  static final _appendCOSName = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDPageContentStream__appendCOSName")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void appendCOSName(org.apache.pdfbox.cos.COSName name)
  ///
  /// This will append a COSName to the content stream.
  ///@param name the name
  ///@throws IOException If an error occurs while writing to the stream.
  ///@deprecated Usage of this method is discouraged.
  void appendCOSName(
    jni.JObject name,
  ) {
    return _appendCOSName(reference, name.reference).check();
  }

  static final _setGraphicsStateParameters = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__setGraphicsStateParameters")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setGraphicsStateParameters(org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState state)
  ///
  /// Set an extended graphics state.
  ///@param state The extended graphics state.
  ///@throws IOException If the content stream could not be written.
  void setGraphicsStateParameters(
    jni.JObject state,
  ) {
    return _setGraphicsStateParameters(reference, state.reference).check();
  }

  static final _addComment = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDPageContentStream__addComment")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void addComment(java.lang.String comment)
  ///
  /// Write a comment line.
  ///@param comment the comment to be added to the content stream.
  ///@throws IOException If the content stream could not be written.
  ///@throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line
  /// could be ordinary PDF content.
  void addComment(
    jni.JString comment,
  ) {
    return _addComment(reference, comment.reference).check();
  }

  static final _writeOperand = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Float)>>("PDPageContentStream__writeOperand")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, double)>();

  /// from: protected void writeOperand(float real)
  ///
  /// Writes a real number to the content stream.
  ///@param real the float value to be added to the content stream.
  ///@throws IOException if something went wrong
  ///@throws IllegalArgumentException if the parameter is not a finite number
  void writeOperand(
    double real,
  ) {
    return _writeOperand(reference, real).check();
  }

  static final _close = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__close")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void close()
  ///
  /// Close the content stream.  This must be called when you are done with this object.
  ///@throws IOException If the underlying stream has a problem being written to.
  void close() {
    return _close(reference).check();
  }

  static final _setRenderingMode = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream__setRenderingMode")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setRenderingMode(org.apache.pdfbox.pdmodel.graphics.state.RenderingMode rm)
  ///
  /// Set the text rendering mode. This determines whether showing text shall cause glyph outlines
  /// to be stroked, filled, used as a clipping boundary, or some combination of the three.
  ///@param rm The text rendering mode.
  ///@throws IOException If the content stream could not be written.
  void setRenderingMode(
    jni.JObject rm,
  ) {
    return _setRenderingMode(reference, rm.reference).check();
  }

  static final _setCharacterSpacing = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Float)>>("PDPageContentStream__setCharacterSpacing")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, double)>();

  /// from: public void setCharacterSpacing(float spacing)
  ///
  /// Set the character spacing. The value shall be added to the horizontal or vertical component
  /// of the glyph's displacement, depending on the writing mode.
  ///@param spacing character spacing
  ///@throws IOException If the content stream could not be written.
  void setCharacterSpacing(
    double spacing,
  ) {
    return _setCharacterSpacing(reference, spacing).check();
  }

  static final _setWordSpacing = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Float)>>("PDPageContentStream__setWordSpacing")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, double)>();

  /// from: public void setWordSpacing(float spacing)
  ///
  /// Set the word spacing. The value shall be added to the horizontal or vertical component of the
  /// ASCII SPACE character, depending on the writing mode.
  ///
  /// This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF
  /// specification tells why: "Word spacing shall be applied to every occurrence of the
  /// single-byte character code 32 in a string when using a simple font or a composite font that
  /// defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32
  /// in multiple-byte codes."
  ///@param spacing word spacing
  ///@throws IOException If the content stream could not be written.
  void setWordSpacing(
    double spacing,
  ) {
    return _setWordSpacing(reference, spacing).check();
  }

  static final _setHorizontalScaling = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Float)>>("PDPageContentStream__setHorizontalScaling")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, double)>();

  /// from: public void setHorizontalScaling(float scale)
  ///
  /// Set the horizontal scaling to scale / 100.
  ///@param scale number specifying the percentage of the normal width. Default value: 100 (normal
  /// width).
  ///@throws IOException If the content stream could not be written.
  void setHorizontalScaling(
    double scale,
  ) {
    return _setHorizontalScaling(reference, scale).check();
  }

  static final _setTextRise = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Float)>>("PDPageContentStream__setTextRise")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, double)>();

  /// from: public void setTextRise(float rise)
  ///
  /// Set the text rise value, i.e. move the baseline up or down. This is useful for drawing
  /// superscripts or subscripts.
  ///@param rise Specifies the distance, in unscaled text space units, to move the baseline up or
  /// down from its default location. 0 restores the default location.
  ///@throws IOException
  void setTextRise(
    double rise,
  ) {
    return _setTextRise(reference, rise).check();
  }
}

final class $PDPageContentStreamType extends jni.JObjType<PDPageContentStream> {
  const $PDPageContentStreamType();

  @override
  String get signature => r"Lorg/apache/pdfbox/pdmodel/PDPageContentStream;";

  @override
  PDPageContentStream fromRef(jni.JObjectPtr ref) =>
      PDPageContentStream.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PDPageContentStreamType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PDPageContentStreamType) &&
        other is $PDPageContentStreamType;
  }
}

/// from: org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode
///
/// This is to choose what to do with the stream: overwrite, append or prepend.
class PDPageContentStream_AppendMode extends jni.JObject {
  @override
  late final jni.JObjType<PDPageContentStream_AppendMode> $type = type;

  PDPageContentStream_AppendMode.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $PDPageContentStream_AppendModeType();
  static final _values =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "PDPageContentStream_AppendMode__values")
          .asFunction<jni.JniResult Function()>();

  /// from: static public org.apache.pdfbox.pdmodel.PDPageContentStream.AppendMode[] values()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<PDPageContentStream_AppendMode> values() {
    return const jni.JArrayType($PDPageContentStream_AppendModeType())
        .fromRef(_values().object);
  }

  static final _valueOf = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream_AppendMode__valueOf")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public org.apache.pdfbox.pdmodel.PDPageContentStream.AppendMode valueOf(java.lang.String name)
  /// The returned object must be released after use, by calling the [release] method.
  static PDPageContentStream_AppendMode valueOf(
    jni.JString name,
  ) {
    return const $PDPageContentStream_AppendModeType()
        .fromRef(_valueOf(name.reference).object);
  }

  static final _isOverwrite = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream_AppendMode__isOverwrite")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isOverwrite()
  bool isOverwrite() {
    return _isOverwrite(reference).boolean;
  }

  static final _isPrepend = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageContentStream_AppendMode__isPrepend")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isPrepend()
  bool isPrepend() {
    return _isPrepend(reference).boolean;
  }
}

final class $PDPageContentStream_AppendModeType
    extends jni.JObjType<PDPageContentStream_AppendMode> {
  const $PDPageContentStream_AppendModeType();

  @override
  String get signature =>
      r"Lorg/apache/pdfbox/pdmodel/PDPageContentStream$AppendMode;";

  @override
  PDPageContentStream_AppendMode fromRef(jni.JObjectPtr ref) =>
      PDPageContentStream_AppendMode.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PDPageContentStream_AppendModeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PDPageContentStream_AppendModeType) &&
        other is $PDPageContentStream_AppendModeType;
  }
}
