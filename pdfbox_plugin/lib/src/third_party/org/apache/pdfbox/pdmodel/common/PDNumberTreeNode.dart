// Generated from Apache PDFBox library which is licensed under the Apache License 2.0.
// The following copyright from the original authors applies.
//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "COSObjectable.dart" as cosobjectable_;
import "../../../../../_init.dart";

/// from: org.apache.pdfbox.pdmodel.common.PDNumberTreeNode
///
/// This class represents a PDF Number tree. See the PDF Reference 1.7 section
/// 7.9.7 for more details.
///@author Ben Litchfield,
///@author Igor Podolskiy
class PDNumberTreeNode extends jni.JObject {
  @override
  late final jni.JObjType<PDNumberTreeNode> $type = type;

  PDNumberTreeNode.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $PDNumberTreeNodeType();
  static final _new0 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDNumberTreeNode__new0")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.Class<? extends org.apache.pdfbox.pdmodel.common.COSObjectable> valueClass)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Constructor.
  ///@param valueClass The PD Model type of object that is the value.
  factory PDNumberTreeNode(
    jni.JObject valueClass,
  ) {
    return PDNumberTreeNode.fromRef(_new0(valueClass.reference).object);
  }

  static final _new1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDNumberTreeNode__new1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(org.apache.pdfbox.cos.COSDictionary dict, java.lang.Class<? extends org.apache.pdfbox.pdmodel.common.COSObjectable> valueClass)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Constructor.
  ///@param dict The dictionary that holds the number information.
  ///@param valueClass The PD Model type of object that is the value.
  factory PDNumberTreeNode.new1(
    jni.JObject dict,
    jni.JObject valueClass,
  ) {
    return PDNumberTreeNode.fromRef(
        _new1(dict.reference, valueClass.reference).object);
  }

  static final _getCOSObject = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDNumberTreeNode__getCOSObject")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public org.apache.pdfbox.cos.COSDictionary getCOSObject()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Convert this standard java object to a COS object.
  ///@return The cos object that matches this Java object.
  jni.JObject getCOSObject() {
    return const jni.JObjectType().fromRef(_getCOSObject(reference).object);
  }

  static final _getKids = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDNumberTreeNode__getKids")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List<org.apache.pdfbox.pdmodel.common.PDNumberTreeNode> getKids()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Return the children of this node.  This list will contain PDNumberTreeNode objects.
  ///@return The list of children or null if there are no children.
  jni.JList<PDNumberTreeNode> getKids() {
    return const jni.JListType($PDNumberTreeNodeType())
        .fromRef(_getKids(reference).object);
  }

  static final _setKids = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDNumberTreeNode__setKids")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setKids(java.util.List<? extends org.apache.pdfbox.pdmodel.common.PDNumberTreeNode> kids)
  ///
  /// Set the children of this number tree.
  ///@param kids The children of this number tree. These have to be in sorted order. Because of
  /// that, it is usually easier to call \#setNumbers(Map) with a map and pass a single
  /// element list here.
  void setKids(
    jni.JList<jni.JObject> kids,
  ) {
    return _setKids(reference, kids.reference).check();
  }

  static final _getValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDNumberTreeNode__getValue")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object getValue(java.lang.Integer index)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Returns the value corresponding to an index in the number tree.
  ///@param index The index in the number tree.
  ///@return The value corresponding to the index.
  ///@throws IOException If there is a problem creating the values.
  jni.JObject getValue(
    jni.JInteger index,
  ) {
    return const jni.JObjectType()
        .fromRef(_getValue(reference, index.reference).object);
  }

  static final _getNumbers = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDNumberTreeNode__getNumbers")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Map<java.lang.Integer,org.apache.pdfbox.pdmodel.common.COSObjectable> getNumbers()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// This will return a map of numbers.  The key will be a java.lang.Integer, the value will
  /// depend on where this class is being used.
  ///@return A map of COS objects.
  ///@throws IOException If there is a problem creating the values.
  jni.JMap<jni.JInteger, cosobjectable_.COSObjectable> getNumbers() {
    return const jni.JMapType(
            jni.JIntegerType(), cosobjectable_.$COSObjectableType())
        .fromRef(_getNumbers(reference).object);
  }

  static final _convertCOSToPD = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDNumberTreeNode__convertCOSToPD")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected org.apache.pdfbox.pdmodel.common.COSObjectable convertCOSToPD(org.apache.pdfbox.cos.COSBase base)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Method to convert the COS value in the number tree to the PD Model object. The default
  /// implementation will simply use reflection to create the correct object type. Subclasses can
  /// do whatever they want.
  ///@param base The COS object to convert.
  ///@return The converted PD Model object.
  ///@throws IOException If there is an error during creation.
  cosobjectable_.COSObjectable convertCOSToPD(
    jni.JObject base,
  ) {
    return const cosobjectable_.$COSObjectableType()
        .fromRef(_convertCOSToPD(reference, base.reference).object);
  }

  static final _createChildNode = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDNumberTreeNode__createChildNode")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected org.apache.pdfbox.pdmodel.common.PDNumberTreeNode createChildNode(org.apache.pdfbox.cos.COSDictionary dic)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Create a child node object.
  ///@param dic The dictionary for the child node object to refer to.
  ///@return The new child node object.
  PDNumberTreeNode createChildNode(
    jni.JObject dic,
  ) {
    return const $PDNumberTreeNodeType()
        .fromRef(_createChildNode(reference, dic.reference).object);
  }

  static final _setNumbers = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDNumberTreeNode__setNumbers")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setNumbers(java.util.Map<java.lang.Integer,? extends org.apache.pdfbox.pdmodel.common.COSObjectable> numbers)
  ///
  /// Set the numbers for this node. This method will set the appropriate upper and lower limits
  /// based on the keys in the map and take care of the ordering.
  ///@param numbers The map of numbers to objects, or <code>null</code> for nothing.
  void setNumbers(
    jni.JMap<jni.JInteger, jni.JObject> numbers,
  ) {
    return _setNumbers(reference, numbers.reference).check();
  }

  static final _getUpperLimit = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDNumberTreeNode__getUpperLimit")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Integer getUpperLimit()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Get the highest value for a key in the number map.
  ///@return The highest value for a key in the map.
  jni.JInteger getUpperLimit() {
    return const jni.JIntegerType().fromRef(_getUpperLimit(reference).object);
  }

  static final _getLowerLimit = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDNumberTreeNode__getLowerLimit")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Integer getLowerLimit()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Get the lowest value for a key in the number map.
  ///@return The lowest value for a key in the map.
  jni.JInteger getLowerLimit() {
    return const jni.JIntegerType().fromRef(_getLowerLimit(reference).object);
  }
}

final class $PDNumberTreeNodeType extends jni.JObjType<PDNumberTreeNode> {
  const $PDNumberTreeNodeType();

  @override
  String get signature =>
      r"Lorg/apache/pdfbox/pdmodel/common/PDNumberTreeNode;";

  @override
  PDNumberTreeNode fromRef(jni.JObjectPtr ref) => PDNumberTreeNode.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PDNumberTreeNodeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PDNumberTreeNodeType) &&
        other is $PDNumberTreeNodeType;
  }
}
