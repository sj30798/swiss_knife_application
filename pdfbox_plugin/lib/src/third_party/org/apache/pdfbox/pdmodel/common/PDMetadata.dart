// Generated from Apache PDFBox library which is licensed under the Apache License 2.0.
// The following copyright from the original authors applies.
//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "PDStream.dart" as pdstream_;

import "../PDDocument.dart" as pddocument_;
import "../../../../../_init.dart";

/// from: org.apache.pdfbox.pdmodel.common.PDMetadata
///
/// This class represents metadata for various objects in a PDF document.
///@author Ben Litchfield
class PDMetadata extends pdstream_.PDStream {
  @override
  late final jni.JObjType<PDMetadata> $type = type;

  PDMetadata.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $PDMetadataType();
  static final _new0 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDMetadata__new0")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(org.apache.pdfbox.pdmodel.PDDocument document)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// This will create a new PDMetadata object.
  ///@param document The document that the stream will be part of.
  factory PDMetadata(
    pddocument_.PDDocument document,
  ) {
    return PDMetadata.fromRef(_new0(document.reference).object);
  }

  static final _new3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDMetadata__new3")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(org.apache.pdfbox.pdmodel.PDDocument doc, java.io.InputStream str)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Constructor.  Reads all data from the input stream and embeds it into the
  /// document, this will close the InputStream.
  ///@param doc The document that will hold the stream.
  ///@param str The stream parameter.
  ///@throws IOException If there is an error creating the stream in the document.
  factory PDMetadata.new3(
    pddocument_.PDDocument doc,
    jni.JObject str,
  ) {
    return PDMetadata.fromRef(_new3(doc.reference, str.reference).object);
  }

  static final _new2 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDMetadata__new2")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(org.apache.pdfbox.cos.COSStream str)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Constructor.
  ///@param str The stream parameter.
  factory PDMetadata.new2(
    jni.JObject str,
  ) {
    return PDMetadata.fromRef(_new2(str.reference).object);
  }

  static final _exportXMPMetadata = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDMetadata__exportXMPMetadata")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.io.InputStream exportXMPMetadata()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Extract the XMP metadata.
  /// To persist changes back to the PDF you must call importXMPMetadata.
  ///@return A stream to get the xmp data from.
  ///@throws IOException If there is an error parsing the XMP data.
  jni.JObject exportXMPMetadata() {
    return const jni.JObjectType()
        .fromRef(_exportXMPMetadata(reference).object);
  }

  static final _importXMPMetadata = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDMetadata__importXMPMetadata")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void importXMPMetadata(byte[] xmp)
  ///
  /// Import an XMP stream into the PDF document.
  ///@param xmp The XMP data.
  ///@throws IOException If there is an error generating the XML document.
  void importXMPMetadata(
    jni.JArray<jni.jbyte> xmp,
  ) {
    return _importXMPMetadata(reference, xmp.reference).check();
  }
}

final class $PDMetadataType extends jni.JObjType<PDMetadata> {
  const $PDMetadataType();

  @override
  String get signature => r"Lorg/apache/pdfbox/pdmodel/common/PDMetadata;";

  @override
  PDMetadata fromRef(jni.JObjectPtr ref) => PDMetadata.fromRef(ref);

  @override
  jni.JObjType get superType => const pdstream_.$PDStreamType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($PDMetadataType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PDMetadataType) && other is $PDMetadataType;
  }
}
