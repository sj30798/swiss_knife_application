// Generated from Apache PDFBox library which is licensed under the Apache License 2.0.
// The following copyright from the original authors applies.
//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "../../../../../../../_init.dart";

/// from: org.apache.pdfbox.pdmodel.common.function.type4.Parser
///
/// Parser for PDF Type 4 functions. This implements a small subset of the PostScript
/// language but is no full PostScript interpreter.
class Parser extends jni.JObject {
  @override
  late final jni.JObjType<Parser> $type = type;

  Parser.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $ParserType();
  static final _parse = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Parser__parse")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public void parse(java.lang.CharSequence input, org.apache.pdfbox.pdmodel.common.function.type4.Parser.SyntaxHandler handler)
  ///
  /// Parses a Type 4 function and sends the syntactic elements to the given
  /// syntax handler.
  ///@param input the text source
  ///@param handler the syntax handler
  static void parse(
    jni.JObject input,
    Parser_SyntaxHandler handler,
  ) {
    return _parse(input.reference, handler.reference).check();
  }
}

final class $ParserType extends jni.JObjType<Parser> {
  const $ParserType();

  @override
  String get signature =>
      r"Lorg/apache/pdfbox/pdmodel/common/function/type4/Parser;";

  @override
  Parser fromRef(jni.JObjectPtr ref) => Parser.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ParserType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ParserType) && other is $ParserType;
  }
}

/// from: org.apache.pdfbox.pdmodel.common.function.type4.Parser$AbstractSyntaxHandler
///
/// Abstract base class for a SyntaxHandler.
class Parser_AbstractSyntaxHandler extends jni.JObject {
  @override
  late final jni.JObjType<Parser_AbstractSyntaxHandler> $type = type;

  Parser_AbstractSyntaxHandler.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Parser_AbstractSyntaxHandlerType();
  static final _new0 = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "Parser_AbstractSyntaxHandler__new0")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Parser_AbstractSyntaxHandler() {
    return Parser_AbstractSyntaxHandler.fromRef(_new0().object);
  }

  static final _comment = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Parser_AbstractSyntaxHandler__comment")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void comment(java.lang.CharSequence text)
  ///
  /// {@inheritDoc}
  void comment(
    jni.JObject text,
  ) {
    return _comment(reference, text.reference).check();
  }

  static final _newLine = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Parser_AbstractSyntaxHandler__newLine")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void newLine(java.lang.CharSequence text)
  ///
  /// {@inheritDoc}
  void newLine(
    jni.JObject text,
  ) {
    return _newLine(reference, text.reference).check();
  }

  static final _whitespace = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Parser_AbstractSyntaxHandler__whitespace")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void whitespace(java.lang.CharSequence text)
  ///
  /// {@inheritDoc}
  void whitespace(
    jni.JObject text,
  ) {
    return _whitespace(reference, text.reference).check();
  }
}

final class $Parser_AbstractSyntaxHandlerType
    extends jni.JObjType<Parser_AbstractSyntaxHandler> {
  const $Parser_AbstractSyntaxHandlerType();

  @override
  String get signature =>
      r"Lorg/apache/pdfbox/pdmodel/common/function/type4/Parser$AbstractSyntaxHandler;";

  @override
  Parser_AbstractSyntaxHandler fromRef(jni.JObjectPtr ref) =>
      Parser_AbstractSyntaxHandler.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Parser_AbstractSyntaxHandlerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Parser_AbstractSyntaxHandlerType) &&
        other is $Parser_AbstractSyntaxHandlerType;
  }
}

/// from: org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler
///
/// This interface defines all possible syntactic elements of a Type 4 function.
/// It is called by the parser as the function is interpreted.
class Parser_SyntaxHandler extends jni.JObject {
  @override
  late final jni.JObjType<Parser_SyntaxHandler> $type = type;

  Parser_SyntaxHandler.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Parser_SyntaxHandlerType();
  static final _newLine = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Parser_SyntaxHandler__newLine")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void newLine(java.lang.CharSequence text)
  ///
  /// Indicates that a new line starts.
  ///@param text the new line character (CR, LF, CR/LF or FF)
  void newLine(
    jni.JObject text,
  ) {
    return _newLine(reference, text.reference).check();
  }

  static final _whitespace = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Parser_SyntaxHandler__whitespace")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void whitespace(java.lang.CharSequence text)
  ///
  /// Called when whitespace characters are encountered.
  ///@param text the whitespace text
  void whitespace(
    jni.JObject text,
  ) {
    return _whitespace(reference, text.reference).check();
  }

  static final _token = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Parser_SyntaxHandler__token")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void token(java.lang.CharSequence text)
  ///
  /// Called when a token is encountered. No distinction between operators and values
  /// is done here.
  ///@param text the token text
  void token(
    jni.JObject text,
  ) {
    return _token(reference, text.reference).check();
  }

  static final _comment = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Parser_SyntaxHandler__comment")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void comment(java.lang.CharSequence text)
  ///
  /// Called for a comment.
  ///@param text the comment
  void comment(
    jni.JObject text,
  ) {
    return _comment(reference, text.reference).check();
  }
}

final class $Parser_SyntaxHandlerType
    extends jni.JObjType<Parser_SyntaxHandler> {
  const $Parser_SyntaxHandlerType();

  @override
  String get signature =>
      r"Lorg/apache/pdfbox/pdmodel/common/function/type4/Parser$SyntaxHandler;";

  @override
  Parser_SyntaxHandler fromRef(jni.JObjectPtr ref) =>
      Parser_SyntaxHandler.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Parser_SyntaxHandlerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Parser_SyntaxHandlerType) &&
        other is $Parser_SyntaxHandlerType;
  }
}
