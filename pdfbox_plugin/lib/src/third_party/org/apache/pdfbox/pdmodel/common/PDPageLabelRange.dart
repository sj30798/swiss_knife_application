// Generated from Apache PDFBox library which is licensed under the Apache License 2.0.
// The following copyright from the original authors applies.
//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "../../../../../_init.dart";

/// from: org.apache.pdfbox.pdmodel.common.PDPageLabelRange
///
/// Contains information for a page label range.
///@author Igor Podolskiy
///@see PDPageLabels
class PDPageLabelRange extends jni.JObject {
  @override
  late final jni.JObjType<PDPageLabelRange> $type = type;

  PDPageLabelRange.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $PDPageLabelRangeType();

  /// from: static public final java.lang.String STYLE_DECIMAL
  ///
  /// Decimal page numbering style (1, 2, 3, ...).
  static const STYLE_DECIMAL = r"""D""";

  /// from: static public final java.lang.String STYLE_ROMAN_UPPER
  ///
  /// Roman numbers (upper case) numbering style (I, II, III, IV, ...).
  static const STYLE_ROMAN_UPPER = r"""R""";

  /// from: static public final java.lang.String STYLE_ROMAN_LOWER
  ///
  /// Roman numbers (lower case) numbering style (i, ii, iii, iv, ...).
  static const STYLE_ROMAN_LOWER = r"""r""";

  /// from: static public final java.lang.String STYLE_LETTERS_UPPER
  ///
  /// Letter (upper case) numbering style (A, B, ..., Z, AA, BB, ..., ZZ, AAA,
  /// ...).
  static const STYLE_LETTERS_UPPER = r"""A""";

  /// from: static public final java.lang.String STYLE_LETTERS_LOWER
  ///
  /// Letter (lower case) numbering style (a, b, ..., z, aa, bb, ..., zz, aaa,
  /// ...).
  static const STYLE_LETTERS_LOWER = r"""a""";

  static final _new0 = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "PDPageLabelRange__new0")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Creates a new empty page label range object.
  factory PDPageLabelRange() {
    return PDPageLabelRange.fromRef(_new0().object);
  }

  static final _new1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageLabelRange__new1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(org.apache.pdfbox.cos.COSDictionary dict)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Creates a new page label range object from the given dictionary.
  ///@param dict the base dictionary for the new object.
  factory PDPageLabelRange.new1(
    jni.JObject dict,
  ) {
    return PDPageLabelRange.fromRef(_new1(dict.reference).object);
  }

  static final _getCOSObject = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageLabelRange__getCOSObject")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public org.apache.pdfbox.cos.COSDictionary getCOSObject()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Returns the underlying dictionary.
  ///@return the underlying dictionary.
  jni.JObject getCOSObject() {
    return const jni.JObjectType().fromRef(_getCOSObject(reference).object);
  }

  static final _getStyle = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageLabelRange__getStyle")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getStyle()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Returns the numbering style for this page range.
  ///@return one of the STYLE_* constants
  jni.JString getStyle() {
    return const jni.JStringType().fromRef(_getStyle(reference).object);
  }

  static final _setStyle = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDPageLabelRange__setStyle")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setStyle(java.lang.String style)
  ///
  /// Sets the numbering style for this page range.
  ///@param style one of the STYLE_* constants or {@code null} if no page
  ///            numbering is desired.
  void setStyle(
    jni.JString style,
  ) {
    return _setStyle(reference, style.reference).check();
  }

  static final _getStart = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageLabelRange__getStart")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getStart()
  ///
  /// Returns the start value for page numbering in this page range.
  ///@return a positive integer the start value for numbering.
  int getStart() {
    return _getStart(reference).integer;
  }

  static final _setStart = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("PDPageLabelRange__setStart")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setStart(int start)
  ///
  /// Sets the start value for page numbering in this page range.
  ///@param start a positive integer representing the start value.
  ///@throws IllegalArgumentException if {@code start} is not a positive integer
  void setStart(
    int start,
  ) {
    return _setStart(reference, start).check();
  }

  static final _getPrefix = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDPageLabelRange__getPrefix")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getPrefix()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Returns the page label prefix for this page range.
  ///@return the page label prefix for this page range, or {@code null} if no
  ///         prefix has been defined.
  jni.JString getPrefix() {
    return const jni.JStringType().fromRef(_getPrefix(reference).object);
  }

  static final _setPrefix = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDPageLabelRange__setPrefix")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setPrefix(java.lang.String prefix)
  ///
  /// Sets the page label prefix for this page range.
  ///@param prefix the page label prefix for this page range, or {@code null} to
  ///            unset the prefix.
  void setPrefix(
    jni.JString prefix,
  ) {
    return _setPrefix(reference, prefix.reference).check();
  }
}

final class $PDPageLabelRangeType extends jni.JObjType<PDPageLabelRange> {
  const $PDPageLabelRangeType();

  @override
  String get signature =>
      r"Lorg/apache/pdfbox/pdmodel/common/PDPageLabelRange;";

  @override
  PDPageLabelRange fromRef(jni.JObjectPtr ref) => PDPageLabelRange.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PDPageLabelRangeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PDPageLabelRangeType) &&
        other is $PDPageLabelRangeType;
  }
}
