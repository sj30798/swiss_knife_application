// Generated from Apache PDFBox library which is licensed under the Apache License 2.0.
// The following copyright from the original authors applies.
//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "Parser.dart" as parser_;

import "InstructionSequence.dart" as instructionsequence_;
import "../../../../../../../_init.dart";

/// from: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder
///
/// Basic parser for Type 4 functions which is used to build up instruction sequences.
class InstructionSequenceBuilder extends parser_.Parser_AbstractSyntaxHandler {
  @override
  late final jni.JObjType<InstructionSequenceBuilder> $type = type;

  InstructionSequenceBuilder.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $InstructionSequenceBuilderType();
  static final _getInstructionSequence = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "InstructionSequenceBuilder__getInstructionSequence")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence getInstructionSequence()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Returns the instruction sequence that has been build from the syntactic elements.
  ///@return the instruction sequence
  instructionsequence_.InstructionSequence getInstructionSequence() {
    return const instructionsequence_.$InstructionSequenceType()
        .fromRef(_getInstructionSequence(reference).object);
  }

  static final _parse = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "InstructionSequenceBuilder__parse")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence parse(java.lang.CharSequence text)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Parses the given text into an instruction sequence representing a Type 4 function
  /// that can be executed.
  ///@param text the Type 4 function text
  ///@return the instruction sequence
  static instructionsequence_.InstructionSequence parse(
    jni.JObject text,
  ) {
    return const instructionsequence_.$InstructionSequenceType()
        .fromRef(_parse(text.reference).object);
  }

  static final _token = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("InstructionSequenceBuilder__token")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void token(java.lang.CharSequence text)
  ///
  /// {@inheritDoc}
  void token(
    jni.JObject text,
  ) {
    return _token(reference, text.reference).check();
  }

  static final _parseInt = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "InstructionSequenceBuilder__parseInt")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public int parseInt(java.lang.String token)
  ///
  /// Parses a value of type "int".
  ///@param token the token to be parsed
  ///@return the parsed value
  static int parseInt(
    jni.JString token,
  ) {
    return _parseInt(token.reference).integer;
  }

  static final _parseReal = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "InstructionSequenceBuilder__parseReal")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public float parseReal(java.lang.String token)
  ///
  /// Parses a value of type "real".
  ///@param token the token to be parsed
  ///@return the parsed value
  static double parseReal(
    jni.JString token,
  ) {
    return _parseReal(token.reference).float;
  }
}

final class $InstructionSequenceBuilderType
    extends jni.JObjType<InstructionSequenceBuilder> {
  const $InstructionSequenceBuilderType();

  @override
  String get signature =>
      r"Lorg/apache/pdfbox/pdmodel/common/function/type4/InstructionSequenceBuilder;";

  @override
  InstructionSequenceBuilder fromRef(jni.JObjectPtr ref) =>
      InstructionSequenceBuilder.fromRef(ref);

  @override
  jni.JObjType get superType =>
      const parser_.$Parser_AbstractSyntaxHandlerType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($InstructionSequenceBuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($InstructionSequenceBuilderType) &&
        other is $InstructionSequenceBuilderType;
  }
}
