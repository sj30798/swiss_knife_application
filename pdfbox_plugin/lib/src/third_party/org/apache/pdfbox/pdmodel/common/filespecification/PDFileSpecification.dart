// Generated from Apache PDFBox library which is licensed under the Apache License 2.0.
// The following copyright from the original authors applies.
//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "../../../../../../_init.dart";

/// from: org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification
///
/// This represents a file specification.
///@author Ben Litchfield
class PDFileSpecification extends jni.JObject {
  @override
  late final jni.JObjType<PDFileSpecification> $type = type;

  PDFileSpecification.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $PDFileSpecificationType();
  static final _new0 = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "PDFileSpecification__new0")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory PDFileSpecification() {
    return PDFileSpecification.fromRef(_new0().object);
  }

  static final _createFS = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDFileSpecification__createFS")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification createFS(org.apache.pdfbox.cos.COSBase base)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// A file specification can either be a COSString or a COSDictionary.  This
  /// will create the file specification either way.
  ///@param base The cos object that describes the fs.
  ///@return The file specification for the COSBase object.
  ///@throws IOException If there is an error creating the file spec.
  static PDFileSpecification createFS(
    jni.JObject base,
  ) {
    return const $PDFileSpecificationType()
        .fromRef(_createFS(base.reference).object);
  }

  static final _getFile = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDFileSpecification__getFile")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getFile()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// This will get the file name.
  ///@return The file name.
  jni.JString getFile() {
    return const jni.JStringType().fromRef(_getFile(reference).object);
  }

  static final _setFile = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDFileSpecification__setFile")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void setFile(java.lang.String file)
  ///
  /// This will set the file name.
  ///@param file The name of the file.
  void setFile(
    jni.JString file,
  ) {
    return _setFile(reference, file.reference).check();
  }
}

final class $PDFileSpecificationType extends jni.JObjType<PDFileSpecification> {
  const $PDFileSpecificationType();

  @override
  String get signature =>
      r"Lorg/apache/pdfbox/pdmodel/common/filespecification/PDFileSpecification;";

  @override
  PDFileSpecification fromRef(jni.JObjectPtr ref) =>
      PDFileSpecification.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PDFileSpecificationType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PDFileSpecificationType) &&
        other is $PDFileSpecificationType;
  }
}
