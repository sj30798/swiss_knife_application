// Generated from Apache PDFBox library which is licensed under the Apache License 2.0.
// The following copyright from the original authors applies.
//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "PDDictionaryWrapper.dart" as pddictionarywrapper_;
import "../../../../../_init.dart";

/// from: org.apache.pdfbox.pdmodel.common.PDTypedDictionaryWrapper
///
/// A wrapper for a COS dictionary including Type information.
///@author Johannes Koch
class PDTypedDictionaryWrapper
    extends pddictionarywrapper_.PDDictionaryWrapper {
  @override
  late final jni.JObjType<PDTypedDictionaryWrapper> $type = type;

  PDTypedDictionaryWrapper.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $PDTypedDictionaryWrapperType();
  static final _new2 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDTypedDictionaryWrapper__new2")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String type)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Creates a new instance with a given type.
  ///@param type the type (Type)
  factory PDTypedDictionaryWrapper.new2(
    jni.JString type0,
  ) {
    return PDTypedDictionaryWrapper.fromRef(_new2(type0.reference).object);
  }

  static final _new1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDTypedDictionaryWrapper__new1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(org.apache.pdfbox.cos.COSDictionary dictionary)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Creates a new instance with a given COS dictionary.
  ///@param dictionary the dictionary
  factory PDTypedDictionaryWrapper.new1(
    jni.JObject dictionary,
  ) {
    return PDTypedDictionaryWrapper.fromRef(_new1(dictionary.reference).object);
  }

  static final _getType = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDTypedDictionaryWrapper__getType")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getType()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Gets the type.
  ///@return the type
  jni.JString getType() {
    return const jni.JStringType().fromRef(_getType(reference).object);
  }
}

final class $PDTypedDictionaryWrapperType
    extends jni.JObjType<PDTypedDictionaryWrapper> {
  const $PDTypedDictionaryWrapperType();

  @override
  String get signature =>
      r"Lorg/apache/pdfbox/pdmodel/common/PDTypedDictionaryWrapper;";

  @override
  PDTypedDictionaryWrapper fromRef(jni.JObjectPtr ref) =>
      PDTypedDictionaryWrapper.fromRef(ref);

  @override
  jni.JObjType get superType =>
      const pddictionarywrapper_.$PDDictionaryWrapperType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($PDTypedDictionaryWrapperType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PDTypedDictionaryWrapperType) &&
        other is $PDTypedDictionaryWrapperType;
  }
}
