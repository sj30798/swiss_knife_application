// Generated from Apache PDFBox library which is licensed under the Apache License 2.0.
// The following copyright from the original authors applies.
//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "../../../../../_init.dart";

/// from: org.apache.pdfbox.pdmodel.common.PDRectangle
///
/// A rectangle in a PDF document.
///@author Ben Litchfield
class PDRectangle extends jni.JObject {
  @override
  late final jni.JObjType<PDRectangle> $type = type;

  PDRectangle.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $PDRectangleType();
  static final _get_LETTER =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_PDRectangle__LETTER")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final org.apache.pdfbox.pdmodel.common.PDRectangle LETTER
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// A rectangle the size of U.S. Letter, 8.5" x 11".
  static PDRectangle get LETTER =>
      const $PDRectangleType().fromRef(_get_LETTER().object);

  static final _get_LEGAL =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_PDRectangle__LEGAL")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final org.apache.pdfbox.pdmodel.common.PDRectangle LEGAL
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// A rectangle the size of U.S. Legal, 8.5" x 14".
  static PDRectangle get LEGAL =>
      const $PDRectangleType().fromRef(_get_LEGAL().object);

  static final _get_A0 =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_PDRectangle__A0")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final org.apache.pdfbox.pdmodel.common.PDRectangle A0
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// A rectangle the size of A0 Paper.
  static PDRectangle get A0 =>
      const $PDRectangleType().fromRef(_get_A0().object);

  static final _get_A1 =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_PDRectangle__A1")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final org.apache.pdfbox.pdmodel.common.PDRectangle A1
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// A rectangle the size of A1 Paper.
  static PDRectangle get A1 =>
      const $PDRectangleType().fromRef(_get_A1().object);

  static final _get_A2 =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_PDRectangle__A2")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final org.apache.pdfbox.pdmodel.common.PDRectangle A2
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// A rectangle the size of A2 Paper.
  static PDRectangle get A2 =>
      const $PDRectangleType().fromRef(_get_A2().object);

  static final _get_A3 =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_PDRectangle__A3")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final org.apache.pdfbox.pdmodel.common.PDRectangle A3
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// A rectangle the size of A3 Paper.
  static PDRectangle get A3 =>
      const $PDRectangleType().fromRef(_get_A3().object);

  static final _get_A4 =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_PDRectangle__A4")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final org.apache.pdfbox.pdmodel.common.PDRectangle A4
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// A rectangle the size of A4 Paper.
  static PDRectangle get A4 =>
      const $PDRectangleType().fromRef(_get_A4().object);

  static final _get_A5 =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_PDRectangle__A5")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final org.apache.pdfbox.pdmodel.common.PDRectangle A5
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// A rectangle the size of A5 Paper.
  static PDRectangle get A5 =>
      const $PDRectangleType().fromRef(_get_A5().object);

  static final _get_A6 =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_PDRectangle__A6")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final org.apache.pdfbox.pdmodel.common.PDRectangle A6
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// A rectangle the size of A6 Paper.
  static PDRectangle get A6 =>
      const $PDRectangleType().fromRef(_get_A6().object);

  static final _new0 = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "PDRectangle__new0")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Constructor.
  ///
  /// Initializes to 0,0,0,0
  factory PDRectangle() {
    return PDRectangle.fromRef(_new0().object);
  }

  static final _new1 = jniLookup<
              ffi.NativeFunction<jni.JniResult Function(ffi.Float, ffi.Float)>>(
          "PDRectangle__new1")
      .asFunction<jni.JniResult Function(double, double)>();

  /// from: public void <init>(float width, float height)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Constructor.
  ///@param width The width of the rectangle.
  ///@param height The height of the rectangle.
  factory PDRectangle.new1(
    double width,
    double height,
  ) {
    return PDRectangle.fromRef(_new1(width, height).object);
  }

  static final _new2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Float, ffi.Float, ffi.Float,
                  ffi.Float)>>("PDRectangle__new2")
      .asFunction<jni.JniResult Function(double, double, double, double)>();

  /// from: public void <init>(float x, float y, float width, float height)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Constructor.
  ///@param x the x coordinate of the rectangle
  ///@param y the y coordinate of the rectangle
  ///@param width The width of the rectangle.
  ///@param height The height of the rectangle.
  factory PDRectangle.new2(
    double x,
    double y,
    double width,
    double height,
  ) {
    return PDRectangle.fromRef(_new2(x, y, width, height).object);
  }

  static final _new3 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDRectangle__new3")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(org.apache.fontbox.util.BoundingBox box)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Constructor.
  ///@param box the bounding box to be used for the rectangle
  factory PDRectangle.new3(
    jni.JObject box,
  ) {
    return PDRectangle.fromRef(_new3(box.reference).object);
  }

  static final _new4 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDRectangle__new4")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(org.apache.pdfbox.cos.COSArray array)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Constructor.
  ///@param array An array of numbers as specified in the PDF Reference for a rectangle type.
  factory PDRectangle.new4(
    jni.JObject array,
  ) {
    return PDRectangle.fromRef(_new4(array.reference).object);
  }

  static final _contains = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Float,
                  ffi.Float)>>("PDRectangle__contains")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, double, double)>();

  /// from: public boolean contains(float x, float y)
  ///
  /// Method to determine if the x/y point is inside this rectangle.
  ///@param x The x-coordinate to test.
  ///@param y The y-coordinate to test.
  ///@return True if the point is inside this rectangle.
  bool contains(
    double x,
    double y,
  ) {
    return _contains(reference, x, y).boolean;
  }

  static final _createRetranslatedRectangle = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDRectangle__createRetranslatedRectangle")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public org.apache.pdfbox.pdmodel.common.PDRectangle createRetranslatedRectangle()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// This will create a translated rectangle based off of this rectangle, such
  /// that the new rectangle retains the same dimensions(height/width), but the
  /// lower left x,y values are zero. <br>
  /// 100, 100, 400, 400 (llx, lly, urx, ury ) <br>
  /// will be translated to 0,0,300,300
  ///@return A new rectangle that has been translated back to the origin.
  PDRectangle createRetranslatedRectangle() {
    return const $PDRectangleType()
        .fromRef(_createRetranslatedRectangle(reference).object);
  }

  static final _getCOSArray = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDRectangle__getCOSArray")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public org.apache.pdfbox.cos.COSArray getCOSArray()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// This will get the underlying array for this rectangle.
  ///@return The cos array.
  jni.JObject getCOSArray() {
    return const jni.JObjectType().fromRef(_getCOSArray(reference).object);
  }

  static final _getLowerLeftX = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDRectangle__getLowerLeftX")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public float getLowerLeftX()
  ///
  /// This will get the lower left x coordinate.
  ///@return The lower left x.
  double getLowerLeftX() {
    return _getLowerLeftX(reference).float;
  }

  static final _setLowerLeftX = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Float)>>("PDRectangle__setLowerLeftX")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, double)>();

  /// from: public void setLowerLeftX(float value)
  ///
  /// This will set the lower left x coordinate.
  ///@param value The lower left x.
  void setLowerLeftX(
    double value,
  ) {
    return _setLowerLeftX(reference, value).check();
  }

  static final _getLowerLeftY = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDRectangle__getLowerLeftY")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public float getLowerLeftY()
  ///
  /// This will get the lower left y coordinate.
  ///@return The lower left y.
  double getLowerLeftY() {
    return _getLowerLeftY(reference).float;
  }

  static final _setLowerLeftY = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Float)>>("PDRectangle__setLowerLeftY")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, double)>();

  /// from: public void setLowerLeftY(float value)
  ///
  /// This will set the lower left y coordinate.
  ///@param value The lower left y.
  void setLowerLeftY(
    double value,
  ) {
    return _setLowerLeftY(reference, value).check();
  }

  static final _getUpperRightX = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDRectangle__getUpperRightX")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public float getUpperRightX()
  ///
  /// This will get the upper right x coordinate.
  ///@return The upper right x .
  double getUpperRightX() {
    return _getUpperRightX(reference).float;
  }

  static final _setUpperRightX = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Float)>>("PDRectangle__setUpperRightX")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, double)>();

  /// from: public void setUpperRightX(float value)
  ///
  /// This will set the upper right x coordinate.
  ///@param value The upper right x .
  void setUpperRightX(
    double value,
  ) {
    return _setUpperRightX(reference, value).check();
  }

  static final _getUpperRightY = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDRectangle__getUpperRightY")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public float getUpperRightY()
  ///
  /// This will get the upper right y coordinate.
  ///@return The upper right y.
  double getUpperRightY() {
    return _getUpperRightY(reference).float;
  }

  static final _setUpperRightY = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Float)>>("PDRectangle__setUpperRightY")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, double)>();

  /// from: public void setUpperRightY(float value)
  ///
  /// This will set the upper right y coordinate.
  ///@param value The upper right y.
  void setUpperRightY(
    double value,
  ) {
    return _setUpperRightY(reference, value).check();
  }

  static final _getWidth = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDRectangle__getWidth")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public float getWidth()
  ///
  /// This will get the width of this rectangle as calculated by
  /// upperRightX - lowerLeftX.
  ///@return The width of this rectangle.
  double getWidth() {
    return _getWidth(reference).float;
  }

  static final _getHeight = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDRectangle__getHeight")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public float getHeight()
  ///
  /// This will get the height of this rectangle as calculated by
  /// upperRightY - lowerLeftY.
  ///@return The height of this rectangle.
  double getHeight() {
    return _getHeight(reference).float;
  }

  static final _transform = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDRectangle__transform")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.awt.geom.GeneralPath transform(org.apache.pdfbox.util.Matrix matrix)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Returns a path which represents this rectangle having been transformed by the given matrix. Note that the
  /// resulting path need not be rectangular.
  ///@param matrix the matrix to be used for the transformation.
  ///@return the resulting path.
  jni.JObject transform(
    jni.JObject matrix,
  ) {
    return const jni.JObjectType()
        .fromRef(_transform(reference, matrix.reference).object);
  }

  static final _getCOSObject = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDRectangle__getCOSObject")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public org.apache.pdfbox.cos.COSBase getCOSObject()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Convert this standard java object to a COS object.
  ///@return The cos object that matches this Java object.
  jni.JObject getCOSObject() {
    return const jni.JObjectType().fromRef(_getCOSObject(reference).object);
  }

  static final _toGeneralPath = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDRectangle__toGeneralPath")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.awt.geom.GeneralPath toGeneralPath()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Returns a general path equivalent to this rectangle. This method avoids the problems caused by Rectangle2D not
  /// working well with -ve rectangles.
  ///@return the general path.
  jni.JObject toGeneralPath() {
    return const jni.JObjectType().fromRef(_toGeneralPath(reference).object);
  }

  static final _toString1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDRectangle__toString1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// This will return a string representation of this rectangle.
  ///@return This object as a string.
  jni.JString toString1() {
    return const jni.JStringType().fromRef(_toString1(reference).object);
  }
}

final class $PDRectangleType extends jni.JObjType<PDRectangle> {
  const $PDRectangleType();

  @override
  String get signature => r"Lorg/apache/pdfbox/pdmodel/common/PDRectangle;";

  @override
  PDRectangle fromRef(jni.JObjectPtr ref) => PDRectangle.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PDRectangleType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PDRectangleType) && other is $PDRectangleType;
  }
}
