// Generated from Apache PDFBox library which is licensed under the Apache License 2.0.
// The following copyright from the original authors applies.
//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "../PDStream.dart" as pdstream_;

import "../../PDDocument.dart" as pddocument_;
import "../../../../../../_init.dart";

/// from: org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile
///
/// This represents an embedded file in a file specification.
///@author Ben Litchfield
class PDEmbeddedFile extends pdstream_.PDStream {
  @override
  late final jni.JObjType<PDEmbeddedFile> $type = type;

  PDEmbeddedFile.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $PDEmbeddedFileType();
  static final _new0 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDEmbeddedFile__new0")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(org.apache.pdfbox.pdmodel.PDDocument document)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// {@inheritDoc}
  factory PDEmbeddedFile(
    pddocument_.PDDocument document,
  ) {
    return PDEmbeddedFile.fromRef(_new0(document.reference).object);
  }

  static final _new2 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDEmbeddedFile__new2")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(org.apache.pdfbox.cos.COSStream str)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// {@inheritDoc}
  factory PDEmbeddedFile.new2(
    jni.JObject str,
  ) {
    return PDEmbeddedFile.fromRef(_new2(str.reference).object);
  }

  static final _new3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDEmbeddedFile__new3")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(org.apache.pdfbox.pdmodel.PDDocument doc, java.io.InputStream str)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// {@inheritDoc}
  factory PDEmbeddedFile.new3(
    pddocument_.PDDocument doc,
    jni.JObject str,
  ) {
    return PDEmbeddedFile.fromRef(_new3(doc.reference, str.reference).object);
  }

  static final _new4 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDEmbeddedFile__new4")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(org.apache.pdfbox.pdmodel.PDDocument doc, java.io.InputStream input, org.apache.pdfbox.cos.COSName filter)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// {@inheritDoc}
  ///@param filter Filter to apply to the stream.
  ///@throws IOException {@inheritDoc}
  factory PDEmbeddedFile.new4(
    pddocument_.PDDocument doc,
    jni.JObject input,
    jni.JObject filter,
  ) {
    return PDEmbeddedFile.fromRef(
        _new4(doc.reference, input.reference, filter.reference).object);
  }

  static final _setSubtype = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDEmbeddedFile__setSubtype")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setSubtype(java.lang.String mimeType)
  ///
  /// Set the subtype for this embedded file.  This should be a mime type value.  Optional.
  ///@param mimeType The mimeType for the file.
  void setSubtype(
    jni.JString mimeType,
  ) {
    return _setSubtype(reference, mimeType.reference).check();
  }

  static final _getSubtype = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDEmbeddedFile__getSubtype")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getSubtype()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Get the subtype(mimetype) for the embedded file.
  ///@return The type of embedded file.
  jni.JString getSubtype() {
    return const jni.JStringType().fromRef(_getSubtype(reference).object);
  }

  static final _getSize = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDEmbeddedFile__getSize")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getSize()
  ///
  /// Get the size of the embedded file.
  ///@return The size of the embedded file.
  int getSize() {
    return _getSize(reference).integer;
  }

  static final _setSize = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("PDEmbeddedFile__setSize")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setSize(int size)
  ///
  /// Set the size of the embedded file.
  ///@param size The size of the embedded file.
  void setSize(
    int size,
  ) {
    return _setSize(reference, size).check();
  }

  static final _getCreationDate = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDEmbeddedFile__getCreationDate")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Calendar getCreationDate()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Get the creation date of the embedded file.
  ///@return The Creation date.
  ///@throws IOException If there is an error while constructing the date.
  jni.JObject getCreationDate() {
    return const jni.JObjectType().fromRef(_getCreationDate(reference).object);
  }

  static final _setCreationDate = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDEmbeddedFile__setCreationDate")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setCreationDate(java.util.Calendar creation)
  ///
  /// Set the creation date.
  ///@param creation The new creation date.
  void setCreationDate(
    jni.JObject creation,
  ) {
    return _setCreationDate(reference, creation.reference).check();
  }

  static final _getModDate = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDEmbeddedFile__getModDate")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Calendar getModDate()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Get the mod date of the embedded file.
  ///@return The mod date.
  ///@throws IOException If there is an error while constructing the date.
  jni.JObject getModDate() {
    return const jni.JObjectType().fromRef(_getModDate(reference).object);
  }

  static final _setModDate = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDEmbeddedFile__setModDate")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setModDate(java.util.Calendar mod)
  ///
  /// Set the mod date.
  ///@param mod The new creation mod.
  void setModDate(
    jni.JObject mod,
  ) {
    return _setModDate(reference, mod.reference).check();
  }

  static final _getCheckSum = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDEmbeddedFile__getCheckSum")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getCheckSum()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Get the check sum of the embedded file.
  ///@return The check sum of the file.
  jni.JString getCheckSum() {
    return const jni.JStringType().fromRef(_getCheckSum(reference).object);
  }

  static final _setCheckSum = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDEmbeddedFile__setCheckSum")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setCheckSum(java.lang.String checksum)
  ///
  /// Set the check sum.
  ///@param checksum The checksum of the file.
  void setCheckSum(
    jni.JString checksum,
  ) {
    return _setCheckSum(reference, checksum.reference).check();
  }

  static final _getMacSubtype = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDEmbeddedFile__getMacSubtype")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getMacSubtype()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Get the mac subtype.
  ///@return The mac subtype.
  jni.JString getMacSubtype() {
    return const jni.JStringType().fromRef(_getMacSubtype(reference).object);
  }

  static final _setMacSubtype = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDEmbeddedFile__setMacSubtype")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setMacSubtype(java.lang.String macSubtype)
  ///
  /// Set the mac subtype.
  ///@param macSubtype The mac subtype.
  void setMacSubtype(
    jni.JString macSubtype,
  ) {
    return _setMacSubtype(reference, macSubtype.reference).check();
  }

  static final _getMacCreator = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDEmbeddedFile__getMacCreator")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getMacCreator()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Get the mac Creator.
  ///@return The mac Creator.
  jni.JString getMacCreator() {
    return const jni.JStringType().fromRef(_getMacCreator(reference).object);
  }

  static final _setMacCreator = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDEmbeddedFile__setMacCreator")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setMacCreator(java.lang.String macCreator)
  ///
  /// Set the mac Creator.
  ///@param macCreator The mac Creator.
  void setMacCreator(
    jni.JString macCreator,
  ) {
    return _setMacCreator(reference, macCreator.reference).check();
  }

  static final _getMacResFork = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PDEmbeddedFile__getMacResFork")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getMacResFork()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Get the mac ResFork.
  ///@return The mac ResFork.
  jni.JString getMacResFork() {
    return const jni.JStringType().fromRef(_getMacResFork(reference).object);
  }

  static final _setMacResFork = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PDEmbeddedFile__setMacResFork")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setMacResFork(java.lang.String macResFork)
  ///
  /// Set the mac ResFork.
  ///@param macResFork The mac ResFork.
  void setMacResFork(
    jni.JString macResFork,
  ) {
    return _setMacResFork(reference, macResFork.reference).check();
  }
}

final class $PDEmbeddedFileType extends jni.JObjType<PDEmbeddedFile> {
  const $PDEmbeddedFileType();

  @override
  String get signature =>
      r"Lorg/apache/pdfbox/pdmodel/common/filespecification/PDEmbeddedFile;";

  @override
  PDEmbeddedFile fromRef(jni.JObjectPtr ref) => PDEmbeddedFile.fromRef(ref);

  @override
  jni.JObjType get superType => const pdstream_.$PDStreamType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($PDEmbeddedFileType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PDEmbeddedFileType) &&
        other is $PDEmbeddedFileType;
  }
}
